<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>浅析Dalvik和ART的区别</title>
      <link href="/2018/03/05/%E6%B5%85%E6%9E%90Dalvik%E5%92%8CART%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <content type="html"><![CDATA[<p>Dalvik是Google公司自己设计用于Android平台的虚拟机，Dalvik经过优化，更加适合Android平台（具体优点见下面和JVM比较）。</p><p>2014年6月谷歌I/O大会上，Android L(5.0)改动幅度比较大，删除了Dalvik，而是用ART代替。</p><p>之前对本块的知识理解比较零散，再此本文总结下Dalvik和ART的原理，和二者的区别，以及Jvm和Dalvik的区别，以及Android的Apk编译打包的流程</p><a id="more"></a><h3 id="Dalvik的相关知识"><a href="#Dalvik的相关知识" class="headerlink" title="Dalvik的相关知识"></a>Dalvik的相关知识</h3><ul><li><strong>Google</strong>公司自己设计<strong>用于Android平台</strong>的<strong>java虚拟机</strong></li><li>支持.dex（即Dalvik Executable）格式的java应用程序运行</li><li>基于寄存器，寄存器CPU的一部分（适合内存和处理器有限的系统）</li><li>允许有限的内存同时运行多个Dalvik虚拟机的实例</li><li>每个Dalvik应用作为一个独立的Linux进程执行，防止一个程序崩溃导致所有程序崩溃</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fp1zktmabmj30hm0r6780.jpg" alt=""></p><h3 id="Jvm的相关知识"><a href="#Jvm的相关知识" class="headerlink" title="Jvm的相关知识"></a>Jvm的相关知识</h3><ul><li>基于栈（内存的一部分）</li><li>javac把程序源码编译成JAVA字节码后，JVM通过逐条解释字节码翻译成机器指令</li></ul><h3 id="Dalvik和Jvm的区别与联系"><a href="#Dalvik和Jvm的区别与联系" class="headerlink" title="Dalvik和Jvm的区别与联系"></a>Dalvik和Jvm的区别与联系</h3><h4 id="图表区别"><a href="#图表区别" class="headerlink" title="图表区别"></a>图表区别</h4><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">本质</th><th style="text-align:center">字节码文件</th><th style="text-align:center">效率</th></tr></thead><tbody><tr><td style="text-align:center">Dalvik</td><td style="text-align:center">基于寄存器</td><td style="text-align:center">一个.Dex文件</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">Jvm</td><td style="text-align:center">基于栈</td><td style="text-align:center">多个.class文件</td><td style="text-align:center">低</td></tr></tbody></table><h4 id="首要区别"><a href="#首要区别" class="headerlink" title="首要区别"></a>首要区别</h4><ul><li>DVM基于寄存器，Jvm基于栈，基于寄存器的编译花费时间更短（在.dex字节码中，变量会赋值给65535个可用寄存器中的任何一个，Dalvik指令直接操作这些寄存器，而不是访问堆栈中的元素。）</li><li>dex字节码更适合于内存和处理器速度有限的系统</li><li>基于寄存器的Dalvik实现虽然牺牲了一些<strong>平台无关性</strong>，但是它在代码的执行效率上要更胜一筹。</li><li>每一个Android 的App是独立跑在一个VM中的。因此一个App crash只会影响到自身的VM，不会影响到其他。Dalvik经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且每一个 Dalvik应用作为一个独立的Linux进程执行。</li></ul><h4 id="字节码区别"><a href="#字节码区别" class="headerlink" title="字节码区别"></a>字节码区别</h4><ul><li>JVM字节码由.class组成，每个java文件对应一个.class</li><li>DVM字节码只包含一个.dex文件，这个文件包含了程序中所有的类</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fp1zfxzxttj30jq0o8tau.jpg" alt="图解.class和.dex文件生成过程"></p><p><strong>Dalvik可执行文件体积小。Android SDK中有一个叫dx的工具负责将Java字节码转换为Dalvik字节码。</strong></p><p>简单来讲，dex格式文件就是将多个class文件中公有的部分统一存放，去除冗余信息。</p><h3 id="ART的相关知识（Android-Runtime）"><a href="#ART的相关知识（Android-Runtime）" class="headerlink" title="ART的相关知识（Android Runtime）"></a>ART的相关知识（Android Runtime）</h3><p>Android Runtime（缩写为 ART），是一种在Android操作系统上的运行环境，由Google公司研发，并在2013年作为Android 4.4系统中的一项测试功能正式对外发布，在Android 5.0及后续Android版本中作为正式的运行时库取代了以往的Dalvik虚拟机。ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机。它与Dalvik的主要不同在于：Dalvik采用的是JIT技术，而ART采用Ahead-of-time（AOT）技术。 ART同时也改善了性能、垃圾回收(Garbage Collection)、应用程序除错以及性能分析。</p><p>JIT最早在Android 2.2系统中引进到Dalvik虚拟机中，在应用程序启动时，JIT通过进行连续的性能分析来优化程序代码的执行，在程序运行的过程中，Dalvik虚拟机在不断的进行将字节码编译成机器码的工作。 与Dalvik虚拟机不同的是，ART引入了AOT这种预编译技术，在应用程序安装的过程中，ART就已经将所有的字节码重新编译成了机器码。应用程序运行过程中无需进行实时的编译工作，只需要进行直接调用。因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升。 为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex），即在应用程序目录下保留了dex文件供旧程序调用然而.odex文件则替换成了可执行与可链接格式（ELF）可执行文件。一旦一个程序被ART的dex2oat命令编译，那么这个程序将会指通过ELF可执行文件来运行。因此，相对于Dalvik虚拟机模式，ART模式下Android应用程序的安装需要消耗更多的时间，同时也会占用更大的储存空间（指内部储存，用于储存编译后的代码）,但节省了很多Dalvik虚拟机用于实时编译的时间。</p><p>Google公司在Android 4.4中带来的ART模式仅仅是ART的一个预览版，系统默认仍然使用的是Dalvik虚拟机，4.4上面提供的预览版ART相对于Android 5.0以后的ART运行时库有较大的不同，尤其体现在兼容性上。</p><p>总结一下上诉内容：</p><ul><li>Android 4.4系统后出现（预览版），系统默认仍然使用的是Dalvik虚拟机，5.0以后是正式版取代了Dalvik虚拟机</li><li>ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机</li><li>为了保证向下兼容，ART使用了相同的Dalvik字节码文件（dex）（而在安装过程中，会通过dex2oat工具生成OAT文件，具体见下面分析）</li></ul><h3 id="Android运行时ART加载OAT文件过程分析"><a href="#Android运行时ART加载OAT文件过程分析" class="headerlink" title="Android运行时ART加载OAT文件过程分析"></a>Android运行时ART加载OAT文件过程分析</h3><p><a href="http://blog.csdn.net/luoshengyang/article/details/39307813" target="_blank" rel="external">查看其他博客分析</a></p><ul><li>ART核心是OAT文件</li><li>是APK在安装的过程中，会通过dex2oat工具生成一个OAT文件</li><li>APK安装过程中生成的OAT文件的输入只有一个DEX文件，也就是来自于打包在要安装的APK文件里面的classes.dex文件（实际上，一个OAT文件是可以由若干个DEX生成的）</li><li>OAT文件是一种Android私有ELF</li><li>它不仅包含有从DEX文件翻译而来的本地机器指令，还包含有原来的DEX文件内容</li></ul><h3 id="Dalvik和ART的区别与联系"><a href="#Dalvik和ART的区别与联系" class="headerlink" title="Dalvik和ART的区别与联系"></a>Dalvik和ART的区别与联系</h3><ul><li>Dalvik和ART使用的的都是.dex字节码，事实上我们把apk解压后确实只有classes.dex文件，但是在ART虚拟机在安装过程中通过dex2oat工具将一个或者诺干个dex生成一个OAT文件</li><li>ART（Ahead-of-time   AOT预编译技术）：应用程序在<strong>安装过程</strong>中，ART将所有的字节码重新编译成了机器码，所以应用程序<strong>运行中</strong>无需进行实时编译工作，只需要进行直接调用，因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的电量消耗，提高了移动设备的续航能力，在垃圾回收等机制上也有了较大的提升，但是安装需要更多的内存空间（存储编译后的代码）和时间，节省了很多Dalvik虚拟机用于实时编译的时间</li><li>Dalvik（Just-in-time  JIT即时编译技术）：（jvm也是JIT即时编译），在Dalvik下，<strong>应用每次运行</strong>都需要通过即时编译器（JIT）将<strong>字节码转换为机器码</strong>，即每次都要编译加运行。虽然安装过程比较快，但是拖慢了应用每次启动的速度</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">编译技术</th><th style="text-align:center">（时机）字节码编译机器码</th><th style="text-align:center">占用空间</th><th>安装时间</th><th style="text-align:center">运行效率（）</th></tr></thead><tbody><tr><td style="text-align:center">Dalvik</td><td style="text-align:center">JIT（即时编译）</td><td style="text-align:center">首次安装时</td><td style="text-align:center">小</td><td>快</td><td style="text-align:center">慢</td></tr><tr><td style="text-align:center">ART</td><td style="text-align:center">AOT（预编译技术）</td><td style="text-align:center">应用每次启动时</td><td style="text-align:center">大（10-20%）</td><td>满</td><td style="text-align:center">快</td></tr></tbody></table><h3 id="几张截图总结"><a href="#几张截图总结" class="headerlink" title="几张截图总结"></a>几张截图总结</h3><p><a href="http://blog.csdn.net/jason0539/article/details/50440669" target="_blank" rel="external">查看原文</a></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fp230bcp69j31ie11m4e4.jpg" alt=""></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fp230q7envj31hw0l277h.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ThreadLocal的理解</title>
      <link href="/2018/03/02/ThreadLocal%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <content type="html"><![CDATA[<h3 id="什么是ThreadLocal"><a href="#什么是ThreadLocal" class="headerlink" title="什么是ThreadLocal"></a>什么是ThreadLocal</h3><p>JDK1.2提供</p><ul><li>根据JDK文档中的解释：</li></ul><p>ThreadLocal的作用是提供线程内的局部变量，这种变量在多线程环境下访问时能够保证各个线程里变量的独立性。</p><p>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立改变该变量的副本，而不会影响其他线程所对应的副本。</p><a id="more"></a><h3 id="ThreadLocal的使用："><a href="#ThreadLocal的使用：" class="headerlink" title="ThreadLocal的使用："></a>ThreadLocal的使用：</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1foyhets3pvj31kw15p4ac.jpg" alt=""></p><p>可以看到我们用ThreadLocal存放了一个String字符串，在不同的线程set数值后，只在当前线程管用，所以说，如同上述所说的</p><ul><li>一个ThreadLocal可以被多个线程共享</li><li>每个线程对同一个ThreadLocal的set get操作只针对当前线程管用</li></ul><h3 id="ThreadLocal的原理以及源码介绍"><a href="#ThreadLocal的原理以及源码介绍" class="headerlink" title="ThreadLocal的原理以及源码介绍"></a>ThreadLocal的原理以及源码介绍</h3><p>大概了解了ThreadLocal如何使用，那么请问，ThreadLocal如何保证不同线程的独立性的呢？</p><h4 id="ThreadLocal几个内部方法"><a href="#ThreadLocal几个内部方法" class="headerlink" title="ThreadLocal几个内部方法"></a>ThreadLocal几个内部方法</h4><h5 id="protected-T-initialValue-（如果不想初始值返回null，需要重写initialValue方法）"><a href="#protected-T-initialValue-（如果不想初始值返回null，需要重写initialValue方法）" class="headerlink" title="protected T initialValue()（如果不想初始值返回null，需要重写initialValue方法）"></a><strong>protected T initialValue()</strong>（如果不想初始值返回null，需要重写initialValue方法）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1foyhxjqs0qj31kw0zyn9s.jpg" alt="如果不想初始值返回null，需要重写initialValue方法"></p><h5 id="public-T-get-（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）"><a href="#public-T-get-（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）" class="headerlink" title="public T get()（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）"></a><strong>public T get()</strong>（该方法返回当前线程变量副本。如果这是线程第一次调用该方法，则创建并初始化此副本。）</h5><p>/**</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> * Returns the value in the current thread's copy of this</div><div class="line"> * thread-local variable.  If the variable has no value for the</div><div class="line"> * current thread, it is first initialized to the value returned</div><div class="line"> * by an invocation of the &#123;@link #initialValue&#125; method.</div><div class="line"> *</div><div class="line"> * @return the current thread's value of this thread-local</div><div class="line"> */</div><div class="line">public T get() &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null) &#123;</div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(this);</div><div class="line">        if (e != null)</div><div class="line">            return (T)e.value;</div><div class="line">    &#125;</div><div class="line">    return setInitialValue();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="public-void-set-T-value"><a href="#public-void-set-T-value" class="headerlink" title="public void set(T value)"></a><strong>public void set(T value)</strong></h5><p>/**</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> * Sets the current thread's copy of this thread-local variable</div><div class="line"> * to the specified value.  Most subclasses will have no need to</div><div class="line"> * override this method, relying solely on the &#123;@link #initialValue&#125;</div><div class="line"> * method to set the values of thread-locals.</div><div class="line"> *</div><div class="line"> * @param value the value to be stored in the current thread's copy of</div><div class="line"> *        this thread-local.</div><div class="line"> */</div><div class="line">public void set(T value) &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null)</div><div class="line">        map.set(this, value);</div><div class="line">    else</div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>由get和set源码可以看出，数据的存取都是先获取ThreadLocalMap对象，从<strong>ThreadLocalMap</strong>存取</li><li>ThreadLocalMap是一个map，它的key，就是threadLocal本身，值就是存放的变量副本</li><li><strong>每个线程对应一个本地变量的map，每个可以存放多个线程本地变量（即不同的ThreadLocal）</strong></li></ol><h5 id="public-void-remove-（jdk1-5后出现）"><a href="#public-void-remove-（jdk1-5后出现）" class="headerlink" title="public void remove()（jdk1.5后出现）"></a><strong>public void remove()</strong>（jdk1.5后出现）</h5><p>/**</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">* Removes the current thread's value for this thread-local</div><div class="line">* variable.  If this thread-local variable is subsequently</div><div class="line">* &#123;@linkplain #get read&#125; by the current thread, its value will be</div><div class="line">* reinitialized by invoking its &#123;@link #initialValue&#125; method,</div><div class="line">* unless its value is &#123;@linkplain #set set&#125; by the current thread</div><div class="line">* in the interim.  This may result in multiple invocations of the</div><div class="line">* &lt;tt&gt;initialValue&lt;/tt&gt; method in the current thread.</div><div class="line">*</div><div class="line">* @since 1.5</div><div class="line">*/</div><div class="line">public void remove() &#123;</div><div class="line">    ThreadLocalMap m = getMap(Thread.currentThread());</div><div class="line">    if (m != null)</div><div class="line">        m.remove(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过remove源码可以看到，</p><ol><li>先通过ThreadLocal的getMap（Thread.currentThread()）方法拿到当前线程的ThreadLocalMap</li><li>然后再在当前线程的ThreadLocalMap中get，set，remove</li></ol><p>关于remove需要知道的几点：</p><ul><li>为什么移除某个ThreadLocal的值：</li></ul><p>目的是减少内存缓存，remove之后如果再次访问此线程局部变量的值，将返回initiValue初始值</p><p>线程结束后，该线程对应的所有局部变量将自动被垃圾回收，但是显示调用remove清楚线程局部变量不是必须操作，但是可以加快内存回收的速度</p><h3 id="ThreadLocal和同步机制synchonzied的区别"><a href="#ThreadLocal和同步机制synchonzied的区别" class="headerlink" title="ThreadLocal和同步机制synchonzied的区别"></a>ThreadLocal和同步机制synchonzied的区别</h3><ul><li>ThreadLocal：以空间换时间</li><li>synchonzied：以时间换空间</li></ul><p>synchonzied同步机制：</p><p>为多线程对相同资源的并发访问控制，保证了多线程之间的数据共享，<strong>同步会带来巨大的性能开销，所以同步操作应该是细粒度的（对象中的不同元素使用不同的锁，而不是整个对象一个锁）</strong>，以时间换空间的意思是：<strong>使用同步真正的风险是复杂性和可能破坏资源安全,而不是性能。</strong></p><p>ThreadLocal线程局部变量机制：</p><p>空间换取时间，不同线程访问同一ThreadLocal，数据的存取是当前线程的数据副本，也就是说不同线程在某一时间访问到的并不是同一对象，所以效率比较高，但是占用内存比较大，当线程结束之后，remove会加快内存的回收速度。</p><p>Synchronized着重于线程间的数据共享，而ThreadLocal则着重于线程间的数据隔离。 </p><h3 id="ThreadLocal的弊端（内存泄露）"><a href="#ThreadLocal的弊端（内存泄露）" class="headerlink" title="ThreadLocal的弊端（内存泄露）"></a>ThreadLocal的弊端（内存泄露）</h3><h4 id="内存泄露原因"><a href="#内存泄露原因" class="headerlink" title="内存泄露原因"></a>内存泄露原因</h4><p>ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部的强引用，那么在系统GC的时候，这个ThreadLocal就会被回收掉</p><p>ThreadLocal被回收掉之后，那么当前Thread的ThreadLocalMap中间就会出现key为null的Entry</p><p>key为null的话就意味着，没有办法访问这些key对应的值，就会存在以下的这样一个强引用链</p><p>value —Entry—TreadLocalMap–Thread</p><h4 id="内存泄露解决"><a href="#内存泄露解决" class="headerlink" title="内存泄露解决"></a>内存泄露解决</h4><p><code>ThreadLocalMap</code>的设计中已经考虑到这种情况，也加上了一些防护措施：在<code>ThreadLocal</code>的<code>get()</code>,<code>set()</code>,<code>remove()</code>的时候都会清除线程<code>ThreadLocalMap</code>里所有<code>key</code>为<code>null</code>的<code>value</code>。</p><h4 id="以下操作会导致内存泄露"><a href="#以下操作会导致内存泄露" class="headerlink" title="以下操作会导致内存泄露"></a>以下操作会导致内存泄露</h4><ol><li><p>使用static的ThreadLocal，延长了<code>ThreadLocal</code>的生命周期，导致某个线程Thread结束后，但是Thread内部的ThreadLocalMap中存在这个静态的ThreadLocal，导致ThreadLocalMap没法被回收，导致该Thread没法被回收</p></li><li><p>分配使用了<code>ThreadLocal</code>又不再调用<code>get()</code>,<code>set()</code>,<code>remove()</code>方法，那么就会导致内存泄漏。因为如上所说</p><p><code>get()</code>,<code>set()</code>,<code>remove()</code>会清理线程ThreadLocalMap里所有key为null的value</p></li></ol><h3 id="Android中ThreadLocal的体现"><a href="#Android中ThreadLocal的体现" class="headerlink" title="Android中ThreadLocal的体现"></a>Android中ThreadLocal的体现</h3><h4 id="Handler消息机制"><a href="#Handler消息机制" class="headerlink" title="Handler消息机制"></a>Handler消息机制</h4><p>熟悉Handler机制的都知道</p><p>在ActivityThread的main方法中Looper.prepareMainLooper();或者在自己创建的线程中Looper.pepare()的时候</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建了一个Looper对象并使用sThreadLocal的set方法进行保存</p><p>并且这个ThreadLocal在Looper类中是静态的，如下</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1foylpjjmbuj31jg0w6k0i.jpg" alt=""></p><p>那就是说，这个静态的ThreadLocal，可以供任何线程访问，但是任意线程中取出来的looper，都只是线程局部变量，都是在副本</p><p>所以说，每个线程对应一个looper，</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1foylttuf5dj31i40ectj5.jpg" alt=""></p><p><strong>对于ThreadLocal的总结，暂时整理到这里，后续补充 ♨</strong></p>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>谈谈启动流程</title>
      <link href="/2017/12/29/%E8%B0%88%E8%B0%88%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ReactNative start</title>
      <link href="/2017/12/25/ReactNative%20start/"/>
      <content type="html"><![CDATA[<h1 id="ReactNative-start"><a href="#ReactNative-start" class="headerlink" title="ReactNative start"></a>ReactNative start</h1><a id="more"></a><h2 id="1，为什么学习ReactNative"><a href="#1，为什么学习ReactNative" class="headerlink" title="1，为什么学习ReactNative"></a>1，为什么学习ReactNative</h2><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>因为现在许多主流的应用都有React Native的影子，它对比原生开发更为灵活，对比H5体验更为高效，而且跨平台的支持特性。</li></ul><ul><li>相对ionic这类PhoneGap，它效率更高，和原生之间的交互更方便。</li></ul><ul><li>多个版本迭代后的今天，它已经拥有了丰富第三方插件支持。</li></ul><ul><li>React Native解决不了的，可以通过各位熟悉的原生来解决。</li></ul><ul><li>更方便的热更新。</li></ul><h3 id="坏处"><a href="#坏处" class="headerlink" title="坏处"></a>坏处</h3><ul><li>尽管是跨平台，但是不同平台Api的特性与显示并不一定一致。</li><li>相对增大了app的体积。</li><li>调试’相对‘麻烦。</li><li>Android上的兼容性问题。</li></ul><h3 id="总的来说"><a href="#总的来说" class="headerlink" title="总的来说"></a>总的来说</h3><p>React Native适合作为项目中的补充，而不是作为核心去开发APP。</p><h2 id="2，搭建开发环境"><a href="#2，搭建开发环境" class="headerlink" title="2，搭建开发环境"></a>2，搭建开发环境</h2><ul><li><p>Webstrom（号称web开发神器，目前对前端的了解有限，因为和android stuido师出同门，所以不商量直接选用他，当然stom也试了试，但是快捷键不如Webstrom熟悉）</p></li><li><p>HomeBrew（Mac系统的包管理器，用于安装NodeJS和一些其他必需的工具软件</p></li><li><p>Node（基于 Chrome V8 引擎的 JavaScript 运行环境）</p></li><li><p>Androd Studio（安卓老本家没啥说的）</p></li><li><p>ReactNative的命令行工具（react-native-cli，React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务</p><p><a href="https://reactnative.cn/docs/0.31/getting-started.html#content" target="_blank" rel="external">详细搭建步骤查看ReactNative中文网</a></p></li></ul><p>一步一步安装完毕后，没错，你已经起飞了；</p><h2 id="3，创建一个项目"><a href="#3，创建一个项目" class="headerlink" title="3，创建一个项目"></a>3，创建一个项目</h2><ul><li><p>终端cd到你想初始化项目的文件夹</p></li><li><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-<span class="keyword">native</span> init FirstRNApp</div></pre></td></tr></table></figure></li><li><p>然后会发现创建了一个FirstRNApp文件夹，这就是创建的第一个项目</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3673902-0affa2b6b71fc650.jpeg?imageMogr2/auto-orient/" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1foabtgnbqjj30bc0k20ua.jpg" alt="项目目录"></p><h2 id="几个关键的文件"><a href="#几个关键的文件" class="headerlink" title="几个关键的文件"></a>几个关键的文件</h2><ul><li><strong>android</strong>文件夹，就是一个可以用android studio打开的android项目。</li><li><strong>ios</strong>文件夹，是一个可以用xcode打开的ios项目。</li><li><strong>index.android.js</strong>，这是android的React Native入口文件。</li><li><strong>index.ios.js</strong>，这是ios的React Native入口文件。</li><li><strong>package.json</strong>，类似android studio的build.gradle，你依赖的库都写在里面。</li><li><strong>node_module</strong>文件夹，你依赖的库下载下来都存放在里面，属于git的忽略文件，你要找的依赖库源码也在里面，包括React和React Native。</li><li><strong>jscode</strong>文件夹，是自己创建的文件夹，用来存放自己写的js文件。</li></ul><h3 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h3><p><strong>package.json</strong></p><p>类似于android studio中的build.gradle添加远程依赖，不同的是，package.json大多数时候不需要我们手动添加，我们只需要在根目录通过命令行，<code>npm install xxxxxx --save</code> 就可以依赖一个库了。</p><p><strong>install</strong>之后，库的依赖信息，自动被写到package.json里面，对应的库也会被下载到node_module文件夹中，类似android studio依赖后把aar同步到本地。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1foabyhxltmj30xe0m6n04.jpg" alt="package.json"></p><hr><p><strong>node_module</strong></p><p><strong>node_module</strong>是一个忽略文件，提交的时候不需要提交到git上，类似android studio远程依赖下来的aar，也不会提交到git上。其他人在使用React Native项目时，只需要npm install，工程就会根据package.json，去同步下载各个依赖库到node_module。</p><p><strong>注</strong>：有时候还需要运行<code>react-native link</code> 或 <code>react-native link xxx</code>，这是因为有些第三方库是通过原生代码加React Native实现的，通过这个命令，可以自动把相关的配置代码，自动添加到android和ios工程中。</p><hr><h2 id="运行这个项目"><a href="#运行这个项目" class="headerlink" title="运行这个项目"></a>运行这个项目</h2><p>作为安卓端有两种方式，ios也同样有两种</p><ul><li><p>cd到项目根目录</p></li><li><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-<span class="keyword">native</span> run-android【react-<span class="keyword">native</span> run-ios】</div></pre></td></tr></table></figure></li><li><p>或者用android stuido直接打开项目中的android文件夹（上面有说过，这是一个可以独立打开的安卓项目）</p></li></ul><h3 id="遇到的小坑"><a href="#遇到的小坑" class="headerlink" title="遇到的小坑"></a>遇到的小坑</h3><h4 id="1，无法从资产的index-android-bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器"><a href="#1，无法从资产的index-android-bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器" class="headerlink" title="1，无法从资产的index.android.bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器"></a>1，<strong>无法从资产的index.android.bundle中加载脚本。确保你的包被正确打包或者你正在运行一个packager服务器</strong></h4><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1foac7mc3cuj30re0zowmx.jpg" alt="bundle无法加载报错"></p><p><strong>搜索了一波，这个错误很常见，解决的办法也很常见，如下</strong></p><ul><li>打开自己的项目文件夹,在Android/app/src/main目录下创建一个空的assets文件夹</li><li>cd到项目根目录，执行</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-<span class="keyword">native</span> bundle --platform android --dev <span class="keyword">false</span> --entry-<span class="keyword">file</span> index.android.js --bundle-output android<span class="regexp">/app/</span>src<span class="regexp">/main/</span>assets<span class="regexp">/index.android.bundle --assets-dest android/</span>app<span class="regexp">/src/m</span>ain<span class="regexp">/res</span></div></pre></td></tr></table></figure><ul><li>事实证明并没有解决我的问题</li><li>解决我的问题的是下面这行</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-<span class="keyword">native</span> bundle --platform android --dev <span class="keyword">false</span> --entry-<span class="keyword">file</span> index.js --bundle-output android<span class="regexp">/app/</span>src<span class="regexp">/main/</span>assets<span class="regexp">/index.android.bundle --assets-dest android/</span>app<span class="regexp">/src/m</span>ain<span class="regexp">/res</span></div></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1foacbagifbj31dc0b8wk6.jpg" alt="两者的区别"></p><p><strong>我们可以回头看上面创建完项目的截图，老版的是分别有index.android.js和index.ios.js</strong></p><p><strong>而我创建的却没有这两个文件，只有一个index.js,修改完之后，我们创建的assets目录下会生成bundle的两个文件</strong></p><h2 id="运行成功（android端）"><a href="#运行成功（android端）" class="headerlink" title="运行成功（android端）"></a>运行成功（android端）</h2><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1foacebj37wj30n014oqco.jpg" alt="运行成功截图"></p><p>相关资料</p><p>[恋猫月亮博客]<a href="https://www.jianshu.com/p/97692b1c451d" target="_blank" rel="external">https://www.jianshu.com/p/97692b1c451d</a>)</p><p><a href="https://reactnative.cn/docs/0.31/getting-started.html#content" target="_blank" rel="external">中文网</a></p><p><a href="http://blog.csdn.net/DavisCZ/article/details/79072062" target="_blank" rel="external">报错</a></p><p>本文仅作个人学习总结，如有出入不够严谨的地方，请联系更改。</p><p><strong>ReactNative才刚刚起步学习，麻烦和坑后续还会经常碰到。但是，既然选择了学习，就要坚持下来！</strong></p>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>谈谈加密算法</title>
      <link href="/2017/12/20/%E8%B0%88%E8%B0%88%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <content type="html"><![CDATA[<p><strong>谈谈加密算法</strong></p><blockquote><p>前言</p></blockquote><p>在应用开发的过程中，客户端和移动端要频繁的进行数据传输，涉及到重要隐私信息的时候，就需要进行数据加密，，即使传输的过程中被截取，也不会信息泄漏。对于加密算法，不少开发者也早有耳闻，例如：Base64，MD5，RSA，AES，DES加密等等，今天就总结一下加密算法</p><a id="more"></a><h4 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h4><h5 id="对称加密："><a href="#对称加密：" class="headerlink" title="对称加密："></a>对称加密：</h5><p>对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。</p><p>对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。</p><p><strong>对称加密的一大缺点</strong>是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在<strong>发送密钥的过程中，密钥有很大的风险会被黑客们拦截</strong>。<strong>现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人</strong>。</p><h5 id="非对称加密："><a href="#非对称加密：" class="headerlink" title="非对称加密："></a>非对称加密：</h5><p>非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。<strong>私钥只能由一方安全保管，不能外泄</strong>，而<strong>公钥则可以发给任何请求它的人</strong>。<strong>非对称加密</strong>使用这对<strong>密钥中的一个进行加密，而解密则需要另一个密钥</strong>。比如，你向银行请求公钥，<strong>银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人–银行才能对你的消息解密</strong>。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。</p><p>目前<strong>最常用的非对称加密算法是RSA算法</strong>，是Rivest, Shamir, 和Adleman于1978年发明</p><h5 id="对称加密和非对称加密-1"><a href="#对称加密和非对称加密-1" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h5><p>虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密使用的密钥用非对称加密，参考网上，看下面的一个例子：</p><ol><li>铁头需要在银行的网站上做一笔交易，他的游览器生成了一个随机数作为对称密钥</li><li>铁头的游览器向银行请求非对称加密的公钥</li><li>银行将公钥发送给铁头</li><li>铁头用这个公钥将自己的对称密钥进行加密</li><li>铁头将加密后的对称密钥发送给银行</li><li>银行用非对称加密的私有密钥对这个对称密钥进行解密获取到铁头的对称密钥</li><li>铁头与银行可以使用对称密钥来对沟通的内容进行加密与解密了。</li></ol><h5 id="对称和非对称加密总结"><a href="#对称和非对称加密总结" class="headerlink" title="对称和非对称加密总结"></a>对称和非对称加密总结</h5><ol><li>对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。</li><li>非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。</li><li>解决的办法是将<strong>对称加密的密钥使用非对称加密的公钥进行加密</strong>，然后发送出去，<strong>接收方使用私钥进行解密得到对称加密的密钥</strong>，然后双方可以使用对称加密来进行沟通。</li></ol><h4 id="非对称加密例子"><a href="#非对称加密例子" class="headerlink" title="非对称加密例子"></a>非对称加密例子</h4><ul><li>RSA（参考<a href="http://www.cnblogs.com/whoislcj/p/5470095.html" target="_blank" rel="external">这里</a>）</li></ul><h4 id="对称加密例子"><a href="#对称加密例子" class="headerlink" title="对称加密例子"></a>对称加密例子</h4><ul><li>AES（参考<a href="http://www.cnblogs.com/whoislcj/p/5473030.html" target="_blank" rel="external">这里</a>）</li></ul><ol><li>项目中除了登陆，支付等接口采用rsa非对称加密，之外的采用aes对称加密</li><li>高级加密标准（英语：Advanced Encryption Standard，缩写：AES）</li><li>这个标准用来替代原先的DES</li></ol><ul><li>DES（参考<a href="http://www.cnblogs.com/whoislcj/p/5580950.html" target="_blank" rel="external">这里</a>）</li></ul><ol><li>DES加密算法出自IBM</li><li>近些年使用越来越少</li><li>DES使用56位密钥，以现代计算能力，24小时内即可被破解。</li></ol><ul><li>AES和DES对比</li></ul><ol><li>AES安全性、效率、灵活性要高于DES</li><li>对称加密优先采用AES</li></ol><h4 id="其他加密"><a href="#其他加密" class="headerlink" title="其他加密"></a>其他加密</h4><ul><li>MD5</li></ul><ol><li><p>特点：单向加密算法，是不可逆的一种的加密方式</p></li><li><p>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</p></li><li><p>容易计算：从原数据计算出MD5值很容易。</p></li><li><p>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</p></li><li><p>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</p></li><li><p>加大MD5安全性</p><ul><li><h6 id="进行多次MD5加密"><a href="#进行多次MD5加密" class="headerlink" title="进行多次MD5加密"></a>进行多次MD5加密</h6></li><li><h6 id="MD5加盐"><a href="#MD5加盐" class="headerlink" title="MD5加盐"></a>MD5加盐</h6><ul><li><h6 id="用string明文的hashcode作为盐，然后进行MD5加密"><a href="#用string明文的hashcode作为盐，然后进行MD5加密" class="headerlink" title="用string明文的hashcode作为盐，然后进行MD5加密"></a>用string明文的hashcode作为盐，然后进行MD5加密</h6></li><li><h6 id="随机生成一串字符串作为盐，然后进行MD5加密"><a href="#随机生成一串字符串作为盐，然后进行MD5加密" class="headerlink" title="随机生成一串字符串作为盐，然后进行MD5加密"></a>随机生成一串字符串作为盐，然后进行MD5加密</h6></li></ul></li></ul></li></ol><ul><li>Base64</li></ul><ol><li>平时开发中遇见的各种数据加密方式，最终都会对加密后的二进制数据进行Base64编码，起到一种二次加密的效果</li><li>其实呢Base64从严格意义上来说的话不是一种加密算法，而是一种编码算法</li><li><a href="http://www.cnblogs.com/whoislcj/p/5887859.html" target="_blank" rel="external">更多</a></li></ol><p>所以，在客户端和服务端数据传送加密，最多使用的是非对称RSA和对称AES，参考<a href="http://blog.csdn.net/Chay_Chan/article/details/58605605" target="_blank" rel="external">这里</a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=34274472&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android　阴影布局(继承FrameLayout)</title>
      <link href="/2017/03/15/Android-%E9%98%B4%E5%BD%B1%E5%B8%83%E5%B1%80-%E7%BB%A7%E6%89%BFFrameLayout/"/>
      <content type="html"><![CDATA[<h1 id="阴影布局-继承FrameLayout"><a href="#阴影布局-继承FrameLayout" class="headerlink" title="阴影布局(继承FrameLayout)"></a>阴影布局(继承FrameLayout)</h1><p>前言：<br>很多情况下，美腻的UI美眉喜欢搞一些花里胡哨阴影什么的,作为一名有追求的程序员迎合美眉的需求，搞一些小阴影并不是什么大问题，比如写一个自定义shape，用5.0的ｚ轴新特性和CardView都可以满足的，但是有些效果不太符合预计设计的效果，像自定义shape作为背景，看起来阴影会有些假，用５．０新特性第一个是版本问题还一个是有时候不起作用，网上也有解决不起作用的方法，我试了，都不太起作用，用cardview的话，如果cardview包裹的太多太复杂的控件，效果也不是太明显，所以有一个自定义FrameLayout来自己画阴影，以后再碰见阴影就又多了一种手段，满足应付设计师</p><a id="more"></a><p><a href="https://github.com/itfengan/xShadowLayout" target="_blank" rel="external">https://github.com/itfengan/xShadowLayout</a></p><p>效果图</p><p><img src="http://img.blog.csdn.net/20171010160954830?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> fengan.shadowdemo;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by fengan on 2017/10/10/010.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BlurMaskFilter;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.PorterDuff;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.support.annotation.FloatRange;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.FrameLayout;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by fengan on 10.10.2017.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShadowLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Default shadow values</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">float</span> DEFAULT_SHADOW_RADIUS = <span class="number">30.0</span>F;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">float</span> DEFAULT_SHADOW_DISTANCE = <span class="number">15.0</span>F;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">float</span> DEFAULT_SHADOW_ANGLE = <span class="number">45.0</span>F;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_SHADOW_COLOR = Color.DKGRAY;</div><div class="line"></div><div class="line">    <span class="comment">// Shadow bounds values</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_ALPHA = <span class="number">255</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">float</span> MAX_ANGLE = <span class="number">360.0</span>F;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">float</span> MIN_RADIUS = <span class="number">0.1</span>F;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">float</span> MIN_ANGLE = <span class="number">0.0</span>F;</div><div class="line">    <span class="comment">// Shadow paint</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Paint mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG) &#123;</div><div class="line">        &#123;</div><div class="line">            setDither(<span class="keyword">true</span>);</div><div class="line">            setFilterBitmap(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// Shadow bitmap and canvas</span></div><div class="line">    <span class="keyword">private</span> Bitmap mBitmap;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Canvas mCanvas = <span class="keyword">new</span> Canvas();</div><div class="line">    <span class="comment">// View bounds</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Rect mBounds = <span class="keyword">new</span> Rect();</div><div class="line">    <span class="comment">// Check whether need to redraw shadow</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mInvalidateShadow = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Detect if shadow is visible</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsShadowed;</div><div class="line"></div><div class="line">    <span class="comment">// Shadow variables</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mShadowColor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mShadowAlpha;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mShadowRadius;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mShadowDistance;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mShadowAngle;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mShadowDx;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mShadowDy;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShadowLayout</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShadowLayout</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShadowLayout</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> AttributeSet attrs, <span class="keyword">final</span> <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line"></div><div class="line">        setWillNotDraw(<span class="keyword">false</span>);</div><div class="line">        setLayerType(LAYER_TYPE_HARDWARE, mPaint);</div><div class="line"></div><div class="line">        <span class="comment">// Retrieve attributes from xml</span></div><div class="line">        <span class="keyword">final</span> TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.ShadowLayout);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            setIsShadowed(typedArray.getBoolean(R.styleable.ShadowLayout_fengan_shadowed, <span class="keyword">true</span>));</div><div class="line">            setShadowRadius(</div><div class="line">                    typedArray.getDimension(</div><div class="line">                            R.styleable.ShadowLayout_fengan_shadow_radius, DEFAULT_SHADOW_RADIUS</div><div class="line">                    )</div><div class="line">            );</div><div class="line">            setShadowDistance(</div><div class="line">                    typedArray.getDimension(</div><div class="line">                            R.styleable.ShadowLayout_fengan_shadow_distance, DEFAULT_SHADOW_DISTANCE</div><div class="line">                    )</div><div class="line">            );</div><div class="line">            setShadowAngle(</div><div class="line">                    typedArray.getInteger(</div><div class="line">                            R.styleable.ShadowLayout_fengan_shadow_angle, (<span class="keyword">int</span>) DEFAULT_SHADOW_ANGLE</div><div class="line">                    )</div><div class="line">            );</div><div class="line">            setShadowColor(</div><div class="line">                    typedArray.getColor(</div><div class="line">                            R.styleable.ShadowLayout_fengan_shadow_color, DEFAULT_SHADOW_COLOR</div><div class="line">                    )</div><div class="line">            );</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            typedArray.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">        <span class="comment">// Clear shadow bitmap</span></div><div class="line">        <span class="keyword">if</span> (mBitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            mBitmap.recycle();</div><div class="line">            mBitmap = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isShadowed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mIsShadowed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setIsShadowed</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isShadowed)</span> </span>&#123;</div><div class="line">        mIsShadowed = isShadowed;</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">float</span> <span class="title">getShadowDistance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mShadowDistance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setShadowDistance</span><span class="params">(<span class="keyword">final</span> <span class="keyword">float</span> shadowDistance)</span> </span>&#123;</div><div class="line">        mShadowDistance = shadowDistance;</div><div class="line">        resetShadow();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">float</span> <span class="title">getShadowAngle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mShadowAngle;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"SupportAnnotationUsage"</span>)</div><div class="line">    <span class="meta">@FloatRange</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setShadowAngle(<span class="meta">@FloatRange</span>(from = MIN_ANGLE, to = MAX_ANGLE) <span class="keyword">final</span> <span class="keyword">float</span> shadowAngle) &#123;</div><div class="line">        mShadowAngle = Math.max(MIN_ANGLE, Math.min(shadowAngle, MAX_ANGLE));</div><div class="line">        resetShadow();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">float</span> <span class="title">getShadowRadius</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mShadowRadius;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setShadowRadius</span><span class="params">(<span class="keyword">final</span> <span class="keyword">float</span> shadowRadius)</span> </span>&#123;</div><div class="line">        mShadowRadius = Math.max(MIN_RADIUS, shadowRadius);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (isInEditMode()) <span class="keyword">return</span>;</div><div class="line">        <span class="comment">// Set blur filter to paint</span></div><div class="line">        mPaint.setMaskFilter(<span class="keyword">new</span> BlurMaskFilter(mShadowRadius, BlurMaskFilter.Blur.NORMAL));</div><div class="line">        resetShadow();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getShadowColor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mShadowColor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setShadowColor</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> shadowColor)</span> </span>&#123;</div><div class="line">        mShadowColor = shadowColor;</div><div class="line">        mShadowAlpha = Color.alpha(shadowColor);</div><div class="line"></div><div class="line">        resetShadow();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">float</span> <span class="title">getShadowDx</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mShadowDx;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">float</span> <span class="title">getShadowDy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mShadowDy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Reset shadow layer</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">resetShadow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Detect shadow axis offset</span></div><div class="line">        mShadowDx = (<span class="keyword">float</span>) ((mShadowDistance) * Math.cos(mShadowAngle / <span class="number">180.0</span>F * Math.PI));</div><div class="line">        mShadowDy = (<span class="keyword">float</span>) ((mShadowDistance) * Math.sin(mShadowAngle / <span class="number">180.0</span>F * Math.PI));</div><div class="line"></div><div class="line">        <span class="comment">// Set padding for shadow bitmap</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> padding = (<span class="keyword">int</span>) (mShadowDistance + mShadowRadius);</div><div class="line">        setPadding(padding, padding, padding, padding);</div><div class="line">        requestLayout();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">int</span> <span class="title">adjustShadowAlpha</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> adjust)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Color.argb(</div><div class="line">                adjust ? MAX_ALPHA : mShadowAlpha,</div><div class="line">                Color.red(mShadowColor),</div><div class="line">                Color.green(mShadowColor),</div><div class="line">                Color.blue(mShadowColor)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        <span class="comment">// Set ShadowLayout bounds</span></div><div class="line">        mBounds.set(</div><div class="line">                <span class="number">0</span>, <span class="number">0</span>, MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">requestLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Redraw shadow</span></div><div class="line">        mInvalidateShadow = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">super</span>.requestLayout();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(<span class="keyword">final</span> Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="comment">// If is not shadowed, skip</span></div><div class="line">        <span class="keyword">if</span> (mIsShadowed) &#123;</div><div class="line">            <span class="comment">// If need to redraw shadow</span></div><div class="line">            <span class="keyword">if</span> (mInvalidateShadow) &#123;</div><div class="line">                <span class="comment">// If bounds is zero</span></div><div class="line">                <span class="keyword">if</span> (mBounds.width() != <span class="number">0</span> &amp;&amp; mBounds.height() != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// Reset bitmap to bounds</span></div><div class="line">                    mBitmap = Bitmap.createBitmap(</div><div class="line">                            mBounds.width(), mBounds.height(), Bitmap.Config.ARGB_8888</div><div class="line">                    );</div><div class="line">                    <span class="comment">// Canvas reset</span></div><div class="line">                    mCanvas.setBitmap(mBitmap);</div><div class="line"></div><div class="line">                    <span class="comment">// We just redraw</span></div><div class="line">                    mInvalidateShadow = <span class="keyword">false</span>;</div><div class="line">                    <span class="comment">// Main feature of this lib. We create the local copy of all content, so now</span></div><div class="line">                    <span class="comment">// we can draw bitmap as a bottom layer of natural canvas.</span></div><div class="line">                    <span class="comment">// We draw shadow like blur effect on bitmap, cause of setShadowLayer() method of</span></div><div class="line">                    <span class="comment">// paint does`t draw shadow, it draw another copy of bitmap</span></div><div class="line">                    <span class="keyword">super</span>.dispatchDraw(mCanvas);</div><div class="line"></div><div class="line">                    <span class="comment">// Get the alpha bounds of bitmap</span></div><div class="line">                    <span class="keyword">final</span> Bitmap extractedAlpha = mBitmap.extractAlpha();</div><div class="line">                    <span class="comment">// Clear past content content to draw shadow</span></div><div class="line">                    mCanvas.drawColor(<span class="number">0</span>, PorterDuff.Mode.CLEAR);</div><div class="line"></div><div class="line">                    <span class="comment">// Draw extracted alpha bounds of our local canvas</span></div><div class="line">                    mPaint.setColor(adjustShadowAlpha(<span class="keyword">false</span>));</div><div class="line">                    mCanvas.drawBitmap(extractedAlpha, mShadowDx, mShadowDy, mPaint);</div><div class="line"></div><div class="line">                    <span class="comment">// Recycle and clear extracted alpha</span></div><div class="line">                    extractedAlpha.recycle();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// Create placeholder bitmap when size is zero and wait until new size coming up</span></div><div class="line">                    mBitmap = Bitmap.createBitmap(<span class="number">1</span>, <span class="number">1</span>, Bitmap.Config.RGB_565);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Reset alpha to draw child with full alpha</span></div><div class="line">            mPaint.setColor(adjustShadowAlpha(<span class="keyword">true</span>));</div><div class="line">            <span class="comment">// Draw shadow bitmap</span></div><div class="line">            <span class="keyword">if</span> (mCanvas != <span class="keyword">null</span> &amp;&amp; mBitmap != <span class="keyword">null</span> &amp;&amp; !mBitmap.isRecycled())</div><div class="line">                canvas.drawBitmap(mBitmap, <span class="number">0.0</span>F, <span class="number">0.0</span>F, mPaint);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Draw child`s</span></div><div class="line">        <span class="keyword">super</span>.dispatchDraw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>布局文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"fengan.shadowdemo.MainActivity"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">fengan.shadowdemo.ShadowLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:fengan_shadowed</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">app:fengan_shadow_angle</span>=<span class="string">"45"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">app:fengan_shadow_radius</span>=<span class="string">"6dp"</span></div><div class="line">        <span class="attr">app:fengan_shadow_distance</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">app:fengan_shadow_color</span>=<span class="string">"#883F51B5"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"250dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@drawable/bg"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Hello World!"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"19sp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">fengan.shadowdemo.ShadowLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure><p>自定义属性ａｔｔｒｓ．ｘｍｌ<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;<span class="built_in">resources</span>&gt;</div><div class="line"></div><div class="line">    &lt;declare-styleable <span class="built_in">name</span>=<span class="string">"ShadowLayout"</span>&gt;</div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"fengan_shadowed"</span> <span class="built_in">format</span>=<span class="string">"boolean"</span>/&gt;</div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"fengan_shadow_distance"</span> <span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"fengan_shadow_angle"</span> <span class="built_in">format</span>=<span class="string">"integer"</span>/&gt;</div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"fengan_shadow_radius"</span> <span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"fengan_shadow_color"</span> <span class="built_in">format</span>=<span class="string">"color"</span>/&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line"></div><div class="line">&lt;/<span class="built_in">resources</span>&gt;</div></pre></td></tr></table></figure></p><p>有灵性的哥哥们，已经猜到这些属性对应的意思啦．．．<br>在此整理方便大家日后使用．．．</p>]]></content>
      
      <categories>
          
          <category> View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>retrofit和动态代理</title>
      <link href="/2017/02/07/retrofit%E5%92%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <content type="html"><![CDATA[<p>简述动态代理在Retrofit的应用</p><blockquote><p>动态代理</p></blockquote><p>代理类在运行前不存在，运行时由程序动态生成的代理方式称为动态代理</p><a id="more"></a><h4 id="关于Retrofit"><a href="#关于Retrofit" class="headerlink" title="关于Retrofit"></a>关于Retrofit</h4><p>Square公司的OkHttp简直是完美的一个网络请求库，而在其上又封装了一层的Retrofit库，使其调用Restful Api更方便</p><h4 id="简述Retrofit调用流程"><a href="#简述Retrofit调用流程" class="headerlink" title="简述Retrofit调用流程"></a>简述Retrofit调用流程</h4><p>因为本篇只是简述动态代理在Retrofit的使用，所以不过多总结Retrofit的详细使用，在上家公司的项目都网络层，用的retrofit，现在这家公司的项目因为刚开始是我独立开发，所以网络层框架我也是用的Retrofit，功能强大，详细使用，以后再总结</p><p>熟悉Retrofit使用的都对下面几个步骤比较熟悉了：</p><ul><li>定义一个ApiService接口，通过注解可以标记请求方法，请求参数，以及添加的头信息</li><li>然后创建Retrofit对象，通过建造者模式设置BaseUrl等一些参数，通过Retrofit对象create一个你定义的接口对象</li><li>拿到接口对象调用具体的方法完成请求</li></ul><p>具体的代码大概如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApiService</span> </span>&#123;</div><div class="line">  <span class="meta">@GET</span>(<span class="string">"users/&#123;user&#125;/repos"</span>)</div><div class="line">  Call&lt;List&lt;Repo&gt;&gt; listRepos(<span class="meta">@Path</span>(<span class="string">"user"</span>) String user);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">    .baseUrl(<span class="string">"https://api.github.com"</span>)</div><div class="line">    .build();</div><div class="line">ApiService service = retrofit.create(ApiService.class);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(<span class="string">"fengan"</span>);</div></pre></td></tr></table></figure><h4 id="ApiService是如何产生的"><a href="#ApiService是如何产生的" class="headerlink" title="ApiService是如何产生的"></a>ApiService是如何产生的</h4><p>因为接口是不可以直接new出来的，那么ApiService是如何产生的呢？</p><p>ApiService service = retrofit.create(ApiService.class);方法内部到底做了什么？</p><p>没错，就是动态代理</p><p>为了更好的理解动态代理，下面过一下简易版的Retrofit，</p><figure class="highlight plain"><figcaption><span>a v</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public interface Callback&lt;T&gt; &#123;</div><div class="line"></div><div class="line">    void onSuccess(Object t);</div><div class="line"></div><div class="line">    void onFailed(Exception e);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 约定最后一个参数是callback</div><div class="line">     */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GithubService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"users/&#123;user&#125;/repos"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">void</span> list&lt;Repos&gt;(<span class="meta">@Path</span>(<span class="string">"user"</span>) String user,Callback&lt;List&lt;Repo&gt;&gt; callback);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用到了两个注解，一个是方法注解，一个是参数注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GET &#123;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Path &#123;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Repo实体类是使用GsonFormat根据json自动生成的。现实使用中，我们在构建Retrofit过程传入GsonFactory</p><p>Retrofit这个类应该是一个builder模式，里面可以设置baseUrl，姑且忽略其他所有参数。还有一个create方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Retrofit</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String baseUrl;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Retrofit</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.baseUrl = builder.baseUrl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String baseUrl;</div><div class="line">        <span class="function">Builder <span class="title">baseUrl</span><span class="params">(String host)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.baseUrl = host;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function">Retrofit <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Retrofit(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最关键的就是create这个方法了，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 缓存中去</div><div class="line">         */</div><div class="line">        Object o = serviceMap.get(clazz);</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 取不到则取构造代理对象</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            o = (T) Proxy.newProxyInstance(Retrofit.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;clazz&#125;, <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">                    <span class="keyword">final</span> Callback&lt;?&gt; callback = (Callback&lt;?&gt;) args[args.length - <span class="number">1</span>];</div><div class="line"></div><div class="line"></div><div class="line">                    <span class="keyword">final</span> GET get = method.getAnnotation(GET.class);</div><div class="line">                    <span class="keyword">if</span> (get != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="comment">/**</span></div><div class="line">                         * 获得GET注解的值</div><div class="line">                         */</div><div class="line">                        String getValue = get.value();</div><div class="line"></div><div class="line">                        System.out.println(getValue);</div><div class="line"></div><div class="line">                        <span class="comment">/**</span></div><div class="line">                         * 获得所有参数上的注解</div><div class="line">                         */</div><div class="line">                        Annotation[][] methodParameterAnnotationArrays = method.getParameterAnnotations();</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (methodParameterAnnotationArrays != <span class="keyword">null</span>) &#123;</div><div class="line">                            <span class="keyword">int</span> count = methodParameterAnnotationArrays.length;</div><div class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">                                <span class="comment">/**</span></div><div class="line">                                 * 获得单个参数上的注解</div><div class="line">                                 */</div><div class="line">                                Annotation[] methodParameterAnnotations = methodParameterAnnotationArrays[i];</div><div class="line"></div><div class="line">                                <span class="keyword">if</span> (methodParameterAnnotations != <span class="keyword">null</span>) &#123;</div><div class="line">                                    <span class="keyword">for</span> (Annotation methodParameterAnnotation : methodParameterAnnotations) &#123;</div><div class="line"></div><div class="line">                                        <span class="comment">/**</span></div><div class="line">                                         * 如果是Path注解</div><div class="line">                                         */</div><div class="line">                                        <span class="keyword">if</span> (methodParameterAnnotation <span class="keyword">instanceof</span> Path) &#123;</div><div class="line"></div><div class="line">                                            <span class="comment">/**</span></div><div class="line">                                             * 取得path注解上的值</div><div class="line">                                             */</div><div class="line">                                            Path path = (Path) methodParameterAnnotation;</div><div class="line">                                            String pathValue = path.value();</div><div class="line">                                            System.out.println(pathValue);</div><div class="line"></div><div class="line">                                            <span class="comment">/**</span></div><div class="line">                                             * 这是对应的参数的值</div><div class="line">                                             */</div><div class="line">                                            System.out.println(args[i]);</div><div class="line"></div><div class="line"></div><div class="line">                                            Request.Builder builder = <span class="keyword">new</span> Request.Builder();</div><div class="line"></div><div class="line"></div><div class="line">                                            <span class="comment">/**</span></div><div class="line">                                             * 使用path注解替换get注解中的值为参数值</div><div class="line">                                             */</div><div class="line">                                            String result = getValue.replaceAll(<span class="string">"\\&#123;"</span> + pathValue + <span class="string">"\\&#125;"</span>, (String) args[i]);</div><div class="line"></div><div class="line">                                            System.out.println(result);</div><div class="line"></div><div class="line">                                            <span class="comment">/**</span></div><div class="line">                                             * 开始构造请求</div><div class="line">                                             */</div><div class="line">                                            Request request = builder.get()</div><div class="line">                                                    .url(baseUrl + <span class="string">"/"</span> + result)</div><div class="line">                                                    .build();</div><div class="line"></div><div class="line">                                            okHttpClient.newCall(request).enqueue(<span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">                                                <span class="meta">@Override</span></div><div class="line">                                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                                                    <span class="comment">/**</span></div><div class="line">                                                     * 失败则回调失败的方法</div><div class="line">                                                     */</div><div class="line">                                                    callback.onFailed(e);</div><div class="line">                                                &#125;</div><div class="line"></div><div class="line">                                                <span class="meta">@Override</span></div><div class="line">                                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                                                    <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">                                                        <span class="comment">/**</span></div><div class="line">                                                         * 请求成功</div><div class="line">                                                         */</div><div class="line">                                                        String body = response.body().string();</div><div class="line"></div><div class="line">                                                        <span class="comment">/**</span></div><div class="line">                                                         * 使用fastjson进行zhuan转换</div><div class="line">                                                         */</div><div class="line">                                                        Type type = callback.getClass().getGenericInterfaces()[<span class="number">0</span>];</div><div class="line"></div><div class="line">                                                        Object o1 = JSON.parse(body);</div><div class="line"></div><div class="line">                                                        <span class="comment">/**</span></div><div class="line">                                                         * 回调成功</div><div class="line">                                                         */</div><div class="line">                                                        callback.onSuccess(o1);</div><div class="line">                                                    &#125;</div><div class="line">                                                &#125;</div><div class="line">                                            &#125;);</div><div class="line"></div><div class="line">                                        &#125;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line"></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line"></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">/**</span></div><div class="line">             * 扔到缓存中</div><div class="line">             */</div><div class="line">            serviceMap.put(clazz, o);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T) o;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>然后我们就可以根据Retrofit那样进行调用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .baseUrl(<span class="string">"https://api.github.com"</span>)</div><div class="line">        .build();</div><div class="line"></div><div class="line">GithubService githubService = retrofit.create(GithubService.class);</div><div class="line"></div><div class="line">githubService.listRepos(<span class="string">"lizhangqu"</span>, <span class="keyword">new</span> Callback&lt;List&lt;Repo&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object t)</span> </span>&#123;</div><div class="line">        System.out.println(t);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailed</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="retrofit动态代理原理"><a href="#retrofit动态代理原理" class="headerlink" title="retrofit动态代理原理"></a>retrofit动态代理原理</h4><p>原理就是先拿到最后一个参数，也就是回调，再拿到方法上的注解，获得具体的值，然后拿到除了回调之外的其他参数，获得参数上的注解，然后根据注解取得对应的值，还有原来的参数值，将方法上的注解的值中进行替换。使用OkHttp构造请求，请求完成后根据将结果解析为回调中的类型。整个过程如下</p><p>拦截到方法、参数，再根据我们在方法上的注解，去拼接为一个正常的Okhttp请求，然后执行。</p><h4 id="java中的动态代理"><a href="#java中的动态代理" class="headerlink" title="java中的动态代理"></a>java中的动态代理</h4><p>在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的</p><p>每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span></div><div class="line"></div><div class="line">proxy:　　指代我们所代理的那个真实对象</div><div class="line">method:　　指代的是我们所要调用真实对象的某个方法的Method对象</div><div class="line">args:　　指代的是调用真实对象某个方法时接受的参数</div></pre></td></tr></table></figure><p>Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)</span>  <span class="keyword">throws</span> IllegalArgumentException</span></div></pre></td></tr></table></figure><p>这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException</span></div><div class="line"></div><div class="line">loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</div><div class="line"></div><div class="line">interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口<span class="params">(多态)</span>，这样我就能调用这组接口中的方法了</div><div class="line"></div><div class="line">h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</div></pre></td></tr></table></figure><p>使用如下：</p><ul><li>定义被代理对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String str)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"I want to rent my house"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String str)</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"hello: "</span> + str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>定义动态代理类，任何动态代理类都必须实现InvotionHandler这个接口，重写invoke方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//　这个就是我们要代理的真实对象</span></div><div class="line">    <span class="keyword">private</span> Object subject;</div><div class="line">    </div><div class="line">    <span class="comment">//    构造方法，给我们要代理的真实对象赋初值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object subject)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.subject = subject;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object object, Method method, Object[] args)</span></span></div><div class="line">            <span class="keyword">throws</span> Throwable</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//　　在代理真实对象前我们可以添加一些自己的操作</span></div><div class="line">        System.out.println(<span class="string">"before rent house"</span>);</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"Method:"</span> + method);</div><div class="line">        </div><div class="line">        <span class="comment">//    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span></div><div class="line">        method.invoke(subject, args);</div><div class="line">        </div><div class="line">        <span class="comment">//　　在代理真实对象后我们也可以添加一些自己的操作</span></div><div class="line">        System.out.println(<span class="string">"after rent house"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//    我们要代理的真实对象</span></div><div class="line">        Subject realSubject = <span class="keyword">new</span> RealSubject();</div><div class="line"></div><div class="line">        <span class="comment">//    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span></div><div class="line">        InvocationHandler handler = <span class="keyword">new</span> DynamicProxy(realSubject);</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</div><div class="line">         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</div><div class="line">         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</div><div class="line">         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</div><div class="line">         */</div><div class="line">        Subject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</div><div class="line">                .getClass().getInterfaces(), handler);</div><div class="line">        </div><div class="line">        System.out.println(subject.getClass().getName());</div><div class="line">        subject.rent();</div><div class="line">        subject.hello(<span class="string">"world"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>事件分发小结</title>
      <link href="/2017/01/20/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%B0%8F%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>Android开发中，事件分发是非常重要的，了解熟悉整个事件分发过程有助于更好的分析各种点击滑动失效问题,也是一个安卓开发必会的一部分，但是时间长了，对整个流程多少会有些模糊，所以在此记录一下</p><a id="more"></a><p>网上看到一张图，可以很详细的描述整个事件分发的过程</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fo6s6mz1gzj30ot0gy42p.jpg" alt="事件分发流程图"></p><p><a href="https://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">原文的链接</a></p><ul><li>问题一：</li></ul><p>当ViewGroup重写的onInterceptTouchEvent，并且始终返回了true，那么子view就永远无法接受到了事件</p><p>但是在实际开发中可能会有这种需求，在按下（ACTION_DOWN）的时候，需要子view进行时间反馈，但在滑动（ACTION_MOVE）或者抬起（ACTION_UP）的时候需要父布局进行拦截操作，这个时候可以使用<strong>requestDisallInterceptRouchEvent(boolean disallowIntercept)</strong>，该方法在<strong>子view中调用</strong>，<strong>getParent().requestDisallInterceptRouchEvent(true)</strong>请求父布局禁用拦截事件功能</p><p><a href="http://blog.csdn.net/qq_34795285/article/details/61200211" target="_blank" rel="external">相关资料</a></p><p>具体例子，在我做的项目中，在viewpager中的每一页fragment中都折线图，viewpager是可以左右切换的，每一页的fragment中的折线图也是可以手势缩放的，所以这就和viewpager滑动有冲突，利用requestDisallInterceptRouchEvent，我们可以自定义折线图控件继承项目中使用的（项目中使用的mpandroid），重写onTouchEvent，当水平滑动的时候，getParent().requestDisallInterceptRouchEvent(true)，请求父布局不拦截事件，交给子view处理。</p><p>相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nongfaziran.workiot.view;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.PointF;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.github.mikephil.charting.charts.LineChart;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by fengan on 2018/2/3.</div><div class="line"> * email:fengan1102@gmail.com</div><div class="line"> * 解决折线图在viewpager滑动冲突</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineChartInViewPager</span> <span class="keyword">extends</span> <span class="title">LineChart</span> </span>&#123;</div><div class="line"></div><div class="line">    PointF downPoint = <span class="keyword">new</span> PointF();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineChartInViewPager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineChartInViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineChartInViewPager</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"ClickableViewAccessibility"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent evt)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (evt.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                downPoint.x = evt.getX();</div><div class="line">                downPoint.y = evt.getY();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                <span class="keyword">if</span> (getScaleX() &gt; <span class="number">1</span> &amp;&amp; Math.abs(evt.getX() - downPoint.x) &gt; <span class="number">5</span>) &#123;</div><div class="line">                    getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(evt);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>未完待续</p>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>谈谈线程池</title>
      <link href="/2016/12/25/%E8%B0%88%E8%B0%88%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <content type="html"><![CDATA[<h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><p>线程基本概念，<a href="http://blog.csdn.net/cswhale/article/details/39053857" target="_blank" rel="external">线程基本概念</a>和<a href="https://www.cnblogs.com/propheterLiu/p/6082666.html" target="_blank" rel="external">Android启动线程的三种方式</a>(点击查看)</p><h4 id="new-Thread（）的弊端"><a href="#new-Thread（）的弊端" class="headerlink" title="new Thread（）的弊端"></a>new Thread（）的弊端</h4><ul><li>总是new Thread（）开启线程，线程执行完会被回收，导致频繁的<a href="https://www.jianshu.com/p/5db05db4f5ab" target="_blank" rel="external">GC</a></li><li>多线程缺乏统一管理，各线程之间互相竞争</li><li>无法实现停止线程（如果一个item滑出页面，则要停止该item上图片的加载，但是如果使用这种方式来创建线程，则无法实现线程停止执行）</li></ul><a id="more"></a><h4 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h4><ul><li>提高线程的复用性，避免频繁创建线程进而导致频繁的GC</li><li>控制线程并发数，合理利用资源</li><li>线程可控性，比如可以定时执行和取消执行某个线程的任务</li></ul><h4 id="线程池的实现"><a href="#线程池的实现" class="headerlink" title="线程池的实现"></a>线程池的实现</h4><ul><li>Android中的线程池其实源于Java，Android开发中线程池的使用和Java中线程池的使用基本一致</li><li>Java中和线程有关的东东叫做Executor，Executor本身是一个接口</li><li>这个接口有一个非常有用的实现类叫做ThreadPoolExecutor</li><li>Android中常用的线程池<strong>都是通过对ThreadPoolExecutor</strong>进行不同配置来实现的</li></ul><p><strong>类的继承结构</strong></p><p>Windows：Ctrl+H</p><p>Mac：Control+H</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt3dofim9j311o0fqtc9.jpg" alt="类的继承结构"></p><h4 id="关于ThreadPoolExecutor"><a href="#关于ThreadPoolExecutor" class="headerlink" title="关于ThreadPoolExecutor"></a>关于ThreadPoolExecutor</h4><p>ThreadPoolExecutor有四个重载的构造方法，我们这里来说说参数最多的那一个重载的构造方法，这样大家就知道其他方法参数的含义了</p><p>构造函数源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</div><div class="line"> * parameters and default thread factory.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</div><div class="line"> *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</div><div class="line"> * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</div><div class="line"> *        pool</div><div class="line"> * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</div><div class="line"> *        the core, this is the maximum time that excess idle threads</div><div class="line"> *        will wait for new tasks before terminating.</div><div class="line"> * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</div><div class="line"> * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</div><div class="line"> *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</div><div class="line"> *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</div><div class="line"> * <span class="doctag">@param</span> handler the handler to use when execution is blocked</div><div class="line"> *        because the thread bounds and queue capacities are reached</div><div class="line"> * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</div><div class="line"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</div><div class="line"> *         or &#123;<span class="doctag">@code</span> handler&#125; is null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                          <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                          <span class="keyword">long</span> keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                          RejectedExecutionHandler handler) &#123;</div><div class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">         Executors.defaultThreadFactory(), handler);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</div><div class="line"> * parameters.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</div><div class="line"> *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</div><div class="line"> * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</div><div class="line"> *        pool</div><div class="line"> * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</div><div class="line"> *        the core, this is the maximum time that excess idle threads</div><div class="line"> *        will wait for new tasks before terminating.</div><div class="line"> * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</div><div class="line"> * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</div><div class="line"> *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</div><div class="line"> *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</div><div class="line"> * <span class="doctag">@param</span> threadFactory the factory to use when the executor</div><div class="line"> *        creates a new thread</div><div class="line"> * <span class="doctag">@param</span> handler the handler to use when execution is blocked</div><div class="line"> *        because the thread bounds and queue capacities are reached</div><div class="line"> * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</div><div class="line"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</div><div class="line"> *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                          <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                          <span class="keyword">long</span> keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                          ThreadFactory threadFactory,</div><div class="line">                          RejectedExecutionHandler handler) &#123;</div><div class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</div><div class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</div><div class="line">        maximumPoolSize &lt; corePoolSize ||</div><div class="line">        keepAliveTime &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</div><div class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</div><div class="line">    <span class="keyword">this</span>.workQueue = workQueue;</div><div class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</div><div class="line">    <span class="keyword">this</span>.handler = handler;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>这里是7个参数(我们在开发中用的更多的是5个参数的构造方法)，OK，那我们来看看这里七个参数的含义：</strong></p><ol><li><strong>corePoolSize</strong>：核心线程的数量</li><li><strong>maximumPoolSize</strong>：最大线程数量</li><li><strong>keepAliveTime</strong>：非核心线程的超时时长，当系统中<strong>非核心线程闲置时间超过</strong>keepAliveTime之后，则会<strong>被回收</strong>。如果ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true，则该参数也表示核心线程的超时时长</li><li><strong>unit</strong>：第三个参数的单位，有纳秒、微秒、毫秒、秒、分、时、天等</li><li><strong>workQueue</strong>：线程池中的任务队列，该队列存储已经被提交，但是尚未执行的任务，存储在这里的任务是由ThreadPoolExecutor的execute方法提交来的。</li><li><strong>threadFactory</strong>  为线程池提供创建新线程的功能，这个我们一般<strong>使用默认即可</strong></li><li><strong>handler</strong> 拒绝策略，当线程无法执行新任务时（一般是由于线程池中的线程数量已经达到最大数或者线程池关闭导致的），默认情况下，当线程池无法处理新线程时，会抛出一个RejectedExecutionException。</li></ol><p><strong>关于workQueue</strong></p><ul><li>workQueue是一个BlockingQueue类型</li><li>BlockingQueue是一个特殊的队列</li><li>从BlockingQueue中取数据时，<ul><li>如果BlockingQueue是空的，则取数据的操作会进入到阻塞状态</li><li>当BlockingQueue中有了新数据时，这个取数据的操作又会被重新唤醒</li><li>如果BlockingQueue中的数据已经满了，往BlockingQueue中存数据的操作又会进入阻塞状态(直到BlockingQueue中又有新的空间，存数据的操作又会被冲洗唤醒</li></ul></li><li>BlockingQueue的种类<ul><li><strong>ArrayBlockingQueue</strong>:这个表示一个<strong>规定了大小</strong>的BlockingQueue，ArrayBlockingQueue的构造函数接受一个int类型的数据，该数据表示BlockingQueue的大小，存储在ArrayBlockingQueue中的元素按照FIFO（先进先出）的方式来进行存取。</li><li><strong>LinkedBlockingQueue</strong>:这个表示一个大小不确定的BlockingQueue，在LinkedBlockingQueue的构造方法中可以传一个int类型的数据，这样创建出来的LinkedBlockingQueue是有大小的，也可以不传，不传的话，LinkedBlockingQueue的大小就为Integer.MAX_VALUE</li><li><strong>PriorityBlockingQueue</strong>:这个队列和LinkedBlockingQueue类似，不同的是PriorityBlockingQueue中的元素不是按照FIFO来排序的，而是按照元素的Comparator来决定存取顺序的（这个功能也反映了存入PriorityBlockingQueue中的数据必须实现了Comparator接口）。</li><li><strong>SynchronousQueue</strong>:这个是同步Queue，属于线程安全的BlockingQueue的一种，在SynchronousQueue中，生产者线程的插入操作必须要等待消费者线程的移除操作，Synchronous内部没有数据缓存空间，因此我们无法对SynchronousQueue进行读取或者遍历其中的数据，元素只有在你试图取走的时候才有可能存在。我们可以理解为生产者和消费者互相等待，等到对方之后然后再一起离开。</li></ul></li></ul><h4 id="ThreadPoolExecuto线程池执行任务时："><a href="#ThreadPoolExecuto线程池执行任务时：" class="headerlink" title="ThreadPoolExecuto线程池执行任务时："></a>ThreadPoolExecuto线程池执行任务时：</h4><p><strong>execute一个线程之后</strong>：</p><ul><li>如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行</li><li>如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行</li><li>如果线程池中的线程数已经达到核心线程数但未超过非核心线程数，且workQueue已满，则开启一个非核心线程来执行任务</li><li>如果线程池中的线程数已经超过非核心线程数，则拒绝执行该任务</li></ul><h4 id="如何配置这些参数（参考AsycTask）"><a href="#如何配置这些参数（参考AsycTask）" class="headerlink" title="如何配置这些参数（参考AsycTask）"></a>如何配置这些参数（参考AsycTask）</h4><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt4c3mgklj31eq15kdqq.jpg" alt="类的继承结构"></p><ul><li>核心线程数为手机CPU数量+1（cpu数量获取方式Runtime.getRuntime().availableProcessors()）</li><li>最大线程数为手机CPU数量×2+1</li><li>线程队列的大小为128</li></ul><h4 id="系统帮我们配置好的线程池四种对比"><a href="#系统帮我们配置好的线程池四种对比" class="headerlink" title="系统帮我们配置好的线程池四种对比"></a><span id="jumpback">系统帮我们配置好的线程池</span><a href="#jump">四种对比</a></h4><ul><li><p>FixedThreadPool</p><ul><li><p>核心线程数量固定的线程池</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</div></pre></td></tr></table></figure></li><li><p>源码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>核心线程数和最大线程数一样</li><li>FixedThreadPool中没有非核心线程，所有的线程都是核心线程</li><li>线程的超时时间为0</li><li>核心线程即使在没有任务可执行的时候也不会被销毁（这样可让FixedThreadPool更快速的响应请求）</li><li>LinkedBlockingQueue却没有参数，这说明线程队列的大小为Integer.MAX_VALUE（2的31次方减1)</li><li>所有的核心线程都在执行任务的时候，新的任务只能进入线程队列中进行等待，直到有线程被空闲出来</li></ul></li><li><p>SingleThreadExecutor</p><ul><li><p>singleThreadExecutor和FixedThreadPool很像，不同的就是SingleThreadExecutor的核心线程数只有1</p></li><li><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</div><div class="line">          (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class="line">  &#125;</div></pre></td></tr></table></figure></li><li><p>最大好处就是可以避免我们去处理线程同步问题</p></li><li><p>只有一个核心线程，确保所有任务都在同一线程中按顺序完成。因此不需要处理线程同步的问题。</p></li><li><p>FixedThreadPool的参数传个1效果一样</p></li></ul></li><li><p>CachedThreadPool</p><ul><li><p>最大的优势是它可以根据程序的运行情况自动来调整线程池中的线程数量</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>CachedThreadPool中是没有核心线程的，但是它的最大线程数却为Integer.MAX_VALUE</p></li><li><p>它是有线程超时机制的，超时时间为60秒</p></li><li><p>最大线程数为无限大</p></li><li><p>添加一个新任务进来的时候，如果线程池中有空闲的线程，则由该空闲的线程执行新任务</p></li><li><p>没有空闲线程，则创建新线程来执行任务</p></li><li><p>CachedThreadPool中没有新任务的时候，它里边所有的线程都会因为超时而被终止</p></li><li><p>任务队列SynchronousQueue相当于一个空集合，导致任何任务都会被立即执行</p></li><li><p>可以在有大量任务请求的时候使用CachedThreadPool</p></li></ul></li><li><p>ScheduleThreadPool</p><ul><li><p>具有定时定期执行任务功能的线程池</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE,</div><div class="line">          DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</div><div class="line">          <span class="keyword">new</span> DelayedWorkQueue());</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>核心线程数量是固定的</p></li><li>非核心线程是无穷大,当非核心线程闲置时，则会被立即回收。</li><li>支持延迟执行任务；定时执行任务；延迟定时执行任务</li></ul></li></ul><h4 id="线程池的其他功能"><a href="#线程池的其他功能" class="headerlink" title="线程池的其他功能"></a>线程池的其他功能</h4><ol><li><strong>shutDown（）</strong>：关闭线程池，不影响已经提交的任务</li><li><strong>shutDownNow（）</strong>：关闭线程池，并尝试终止正在执行的线程</li><li><strong>allowCoreThreadTimeOut(boolean value)</strong>：允许核心线程闲置超时被回收</li><li><strong>submit</strong>：一般情况下我们使用execute来提交任务，但是有时候可能也会用到submit，使用submit的好处是submit有返回值</li></ol><h4 id="线程池简单封装"><a href="#线程池简单封装" class="headerlink" title="线程池简单封装"></a>线程池简单封装</h4><p>ThreadPoolManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by fengan on 2017/12/25.</div><div class="line"> * email:fengan1102@gmail.com</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolManager Instance;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadPoolExecutor threadPoolExecutor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadPoolManager</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//核心线程数量</span></div><div class="line"><span class="comment">//最大线程数量</span></div><div class="line"><span class="comment">//非核心线程的超时时长</span></div><div class="line"><span class="comment">//时间单位</span></div><div class="line"><span class="comment">//缓冲队列，用于存放等待任务，Linked的先进先出</span></div><div class="line"><span class="comment">//创建线程的工厂</span></div><div class="line"><span class="comment">//用来对超出maximumPoolSize的任务的处理策略</span></div><div class="line">        threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize,<span class="comment">//核心线程数量</span></div><div class="line">                maximumPoolSize,<span class="comment">//最大线程数量</span></div><div class="line">                keepAliveTime,<span class="comment">//非核心线程的超时时长</span></div><div class="line">                unit,<span class="comment">//时间单位</span></div><div class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),<span class="comment">//缓冲队列，用于存放等待任务，Linked的先进先出</span></div><div class="line">                Executors.defaultThreadFactory(), <span class="comment">//创建线程的工厂</span></div><div class="line">                <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy() <span class="comment">//用来对超出maximumPoolSize的任务的处理策略</span></div><div class="line">        );</div><div class="line">        threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);<span class="comment">//设置核心线程超时时间可用</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Instance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (ThreadPoolManager.class) &#123;</div><div class="line">                <span class="keyword">if</span> (Instance == <span class="keyword">null</span>) &#123;</div><div class="line">                    Instance = <span class="keyword">new</span> ThreadPoolManager();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//当前设备可用处理器核心数*2 + 1,能够让cpu的效率得到最大程度执行（有研究论证的）</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> corePoolSize = Runtime.getRuntime().availableProcessors() * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">    <span class="comment">//最大线程数等于核心线程数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maximumPoolSize = corePoolSize;</div><div class="line">    <span class="comment">//超时时间，1小时</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> keepAliveTime = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TimeUnit unit = TimeUnit.HOURS;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行任务</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (runnable == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        threadPoolExecutor.execute(runnable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从线程池中移除任务</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Runnable runnable)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (runnable == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        threadPoolExecutor.remove(runnable);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="再次比较四种常见的线程池详细比较"><a href="#再次比较四种常见的线程池详细比较" class="headerlink" title="再次比较四种常见的线程池详细比较"></a><span id="jump">再次比较四种常见的线程池</span><a href="#jumpback">详细比较</a></h4><p><strong>不管哪种线程池，都是靠ThreadPoolExecutor的七个参数的构造来实现的</strong></p><table><thead><tr><th></th><th>核心线程</th><th>最大线程</th><th></th><th>特点</th></tr></thead><tbody><tr><td><font color="red">FixThreadPool</font></td><td>有</td><td>无（非核心线程）</td><td>不会被回收</td><td>只有固定数量的核心线程，线程都活动时，新任务等待</td></tr><tr><td><font color="red">SingleThreadPool</font></td><td>1</td><td>无（非核心线程）</td><td>不会被回收</td><td>所有任务都在统一线程执行，不需要处理线程同步问题</td></tr><tr><td><font color="red">CachedThreadPool</font></td><td>无</td><td>Integer.MAX_VALUE</td><td>超时时间60秒</td><td>任何任务立即执行</td></tr><tr><td><font color="red">ScheduledThreadPool</font></td><td>有</td><td>Integer.MAX_VALUE</td><td>非核心线程闲置，立即回收</td><td>可以延迟和定时执行</td></tr></tbody></table><p>相关资料：</p><p><a href="http://blog.csdn.net/xiangyunwan/article/details/72550948" target="_blank" rel="external">1</a><a href="http://blog.csdn.net/u012702547/article/details/52259529" target="_blank" rel="external">2</a><a href="http://blog.csdn.net/cswhale/article/details/39053857" target="_blank" rel="external">3</a></p>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AsyncTask的弊端</title>
      <link href="/2016/12/20/AsyncTask%E7%BC%BA%E9%99%B7%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<h1 id="AsyncTask的弊端"><a href="#AsyncTask的弊端" class="headerlink" title="AsyncTask的弊端"></a>AsyncTask的弊端</h1><blockquote><p>前言</p></blockquote><p>Android开发中，AsyncTask可以替代Handler和Thread来处理后台操作和通知Ui刷新，适用于处理异步数据，并将更新Ui的场景，AsyncTask适用于后台操作只有几秒的短时操作。但是AsyncTask本身存在很多糟糕的问题，如果使用中不注意，将会影响程序的健壮性。</p><a id="more"></a><h2 id="AsyncTask和Handler对比"><a href="#AsyncTask和Handler对比" class="headerlink" title="AsyncTask和Handler对比"></a>AsyncTask和Handler对比</h2><p><strong>注意：按照Android官方文档支出,AsyncTask被推荐为处理短时间(10秒以内)的操作,即本地的轻量IO操作.不适合使用网络这样时间不定的操作.</strong></p><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><p>都是为了解决耗时操作的问题，主要区别在于一个流程完善，拿来就用（AsyncTask），一个偏向自主定制，扩展性高（Handler+Thread）。</p><ul><li><strong>AsyncTask比Handler轻量级，对吗？</strong></li></ul><ol><li>通过看源码，发现AsyncTask实际上就是一个线程池，而网上的说法是AsyncTask比handler要轻量级，显然上不准确的，只能这样说，AsyncTask在代码上比handler要轻量级别，而实际上要比handler更耗资源，因为AsyncTask底层是一个线程池！而Handler仅仅就是发送了一个消息队列，连线程都没有开。</li><li>但是，如果异步任务的数据特别庞大，AsyncTask这种线程池结构的优势就体现出来了。</li></ol><ul><li><strong>AsyncTask实现的原理,和适用的优缺点</strong></li></ul><p>AsyncTask,是android提供的轻量级的异步类,可以直接继承AsyncTask,在类中实现异步操作,并提供接口反馈当前异步执行的程度(可以通过接口实现UI进度更新),最后反馈执行的结果给UI主线程.</p><p>使用的优点:</p><p>l  简单,快捷</p><p>l  过程可控</p><p>使用的缺点:</p><p>l 在使用多个异步操作的同时，共同进行Ui变更时,就变得复杂起来.</p><p>l 最大并发数不超过5</p><ul><li><strong>Handler异步实现的原理和适用的优缺点</strong></li></ul><p>在Handler 异步实现时,涉及到 Handler, Looper, Message,Thread四个对象，实现异步的流程是主线程启动Thread（子线程）àthread(子线程)运行并生成Message-àLooper获取Message并传递给HandleràHandler逐个获取Looper中的Message，并进行UI变更。</p><p><strong>使用的优点：</strong></p><p>l  结构清晰，功能定义明确</p><p>l  对于多个后台任务时，简单，清晰</p><p><strong>使用的缺点：</strong></p><p>l  在单个后台异步处理时，显得代码过多，结构过于复杂（相对性）</p><h2 id="AsyncTask的使用："><a href="#AsyncTask的使用：" class="headerlink" title="AsyncTask的使用："></a>AsyncTask的使用：</h2><ul><li><strong>必选方法：</strong></li></ul><p>1，  doinbackground(params…) 后台执行，比较耗时的操作都可以放在这里。</p><p>注意这里不能直接操作UI。此方法在后台线程执行，完成任务的主要工作</p><p>，通常需要较长的时间。在执行过程中可以调用</p><p>Public progress(progress…)来更新任务的进度。</p><p>2，  onpostexecute(result)相当于handler处理UI的方式，在这里可以使用在</p><p>doinbackground得到的结果处理操作UI。此方法在主线程执行，任务执行的结果作为此方法的参数返回。</p><ul><li><strong>可选方法：</strong></li></ul><p>1，  onprogressupdate(progress…) 可以使用进度条增加用户体验度。此方法在主线程执行，用户显示任务执行的进度。</p><p>2，  onpreExecute()  这里是最新用户调用excute时的接口，当任务执行之前开始调用此方法，可以在这里显示进度对话框。</p><p>3，  onCancelled()  用户调用取消时，要做的操作</p><ul><li><strong>AsyncTask三个状态：</strong></li></ul><p>pending,running,finished</p><ul><li><strong>使用AsyncTask类，遵守的准则：</strong></li></ul><p>1，  Task的实例必须在UI thread中创建；</p><p>2，  Execute方法必须在UI thread中调用</p><p>3，  不要手动的调用onPfreexecute()，onPostExecute(result)</p><p>Doinbackground(params…),onProgressupdate(progress…)这几个方法；</p><p>4，  该task只能被执行一次，否则多次调用时将会出现异常;</p><h2 id="AsyncTask缺陷总结："><a href="#AsyncTask缺陷总结：" class="headerlink" title="AsyncTask缺陷总结："></a>AsyncTask缺陷总结：</h2><ul><li><p><strong>生命周期</strong></p><p>很多开发者会认为在一个Activity中创建的AsyncTask会随着Activity销毁而销毁，事实并非如此，AsyncTask会随着doInBackground（）方法执行完毕才销毁，然后，cancel（）被调用，那么onCancel会执行；否则执行postExecute方法会执行。如果在AsyncTask没有执行完毕，就销毁了Activity，AsyncTask可能会崩溃，因为它想要处理的view已经不存在了。所以，我们总是必须确保在销毁活动之前取消任务。总之，我们使用AsyncTask需要确保AsyncTask正确地取消。</p><p>另外，即使我们正确地调用了cancle() 也未必能真正地取消任务。因为如果在doInBackgroud里有一个不可中断的操作，比如BitmapFactory.decodeStream()，那么这个操作会继续下去。</p></li><li><p><strong>内存泄漏</strong></p><p>如果AsyncTask未声明成静态，则会持有外部类Activity的引用，当Activity销毁之后，AsyncTask还在执行，它将在内存中依旧保持这个引用，会造成内存泄漏</p></li><li><p><strong>结果丢失</strong></p><p>当屏幕旋转Activity销毁重新创建（未配置android:configChanges=”orientation|screenSize”的情况）之前运行的AsyncTask会持有之前Activity的引用，这时调用onPostExecute()再去更新界面将不再生效。</p></li><li><p><strong>并行还是串行</strong></p><p>当想要串行执行时，直接执行execute()方法，如果需要并行执行，则要执行executeOnExecutor(Executor)。</p></li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29761059&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之原型模式</title>
      <link href="/2016/12/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>原型设计模式的是一种创建型的设计模式，如果创建过程笔记复杂耗时的话，可以考虑使用原型设计模式；通过克隆已有的对象来获取一个新的对象，你可以直接使用它，也可以修改克隆对象的部分属性再使用，使得我们的程序更加高效<br><a id="more"></a></p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>如果一个类的初始化需要很多资源，这个资源包括数据或者硬件资源等，通过原型拷贝已有的对象来避免这些消耗</li><li>通过new产生的一个对象需要非常繁琐的数据准备或者权限，这时可以使用原型模式。</li><li>一个对象需要提供给其他对象访问，而且各个调用者可能<strong>都</strong>需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。</li></ul><h5 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h5><p>首先我们得实现Cloneable接口，复写clone方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.it.fengan.designpattern.pattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by fengan on 2017/12/22.</div><div class="line"> * email:fengan1102@gmail.com</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String des;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> des;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(String des)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.des = des;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> money;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.money = money;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Worker&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", des='"</span> + des + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", money="</span> + money +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Worker <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        Worker worker = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            worker = (Worker) <span class="keyword">super</span>.clone();</div><div class="line">            worker.money = <span class="keyword">this</span>.money;</div><div class="line">            worker.name = <span class="keyword">this</span>.name;</div><div class="line">            worker.des = <span class="keyword">this</span>.des;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> worker;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>clone这个方法不是Cloneable接口中的（Cloneable是一个空接口）</li><li>clone是Object中的方法</li><li>Cloneable是一个标识接口，它表明这个类的对象是可以拷贝的</li><li>如果没有实现Cloneable接口却调用了clone()函数将抛出异常。</li></ol><h5 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h5><p><strong>浅拷贝</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> User <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">       User user = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span>&#123;</div><div class="line">           user = (User)<span class="keyword">super</span>.clone();</div><div class="line">       &#125; <span class="keyword">catch</span> (CloneNotSupportedException e)&#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> user;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>那么在实现clone方法的时候，需要注意个问题，像上面那样，直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user = (User)<span class="keyword">super</span>.clone();</div></pre></td></tr></table></figure><p>这样只是简单的拷贝了对象，实际上并不是将原始文档的所有字段都重新构造了一份，而是副本文档的字段引用原始文档的字段。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmplwxu1opj30h60alaan.jpg" alt="浅拷贝"></p><p><strong>深拷贝</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WordDocument <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            WordDocument doc = (WordDocument) <span class="keyword">super</span>.clone();</div><div class="line">            doc.mText = <span class="keyword">this</span>.mText;</div><div class="line">            doc.mImages = (ArrayList&lt;String&gt;) <span class="keyword">this</span>.mImages.clone();</div><div class="line">            <span class="keyword">return</span> doc;</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h5 id="Android中的应用"><a href="#Android中的应用" class="headerlink" title="Android中的应用"></a>Android中的应用</h5><p>Intenet源码</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">*</div><div class="line"> * &lt;p&gt;These are the possible flags that can be used in the Intent via</div><div class="line"> * &#123;@link #setFlags&#125; and &#123;@link #addFlags&#125;.  See &#123;@link #setFlags&#125; for a list</div><div class="line"> * of all possible flags.</div><div class="line"> */</div><div class="line">public class Intent implements Parcelable, Cloneable &#123;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    public Object clone() &#123;</div><div class="line">        return new Intent(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Intent(Intent o) &#123;</div><div class="line">        this.mAction = o.mAction;</div><div class="line">        this.mData = o.mData;</div><div class="line">        this.mType = o.mType;</div><div class="line">        this.mPackage = o.mPackage;</div><div class="line">        this.mComponent = o.mComponent;</div><div class="line">        this.mFlags = o.mFlags;</div><div class="line">        this.mContentUserHint = o.mContentUserHint;</div><div class="line">        if (o.mCategories != null) &#123;</div><div class="line">            this.mCategories = new ArraySet&lt;String&gt;(o.mCategories);</div><div class="line">        &#125;</div><div class="line">        if (o.mExtras != null) &#123;</div><div class="line">            this.mExtras = new Bundle(o.mExtras);</div><div class="line">        &#125;</div><div class="line">        if (o.mSourceBounds != null) &#123;</div><div class="line">            this.mSourceBounds = new Rect(o.mSourceBounds);</div><div class="line">        &#125;</div><div class="line">        if (o.mSelector != null) &#123;</div><div class="line">            this.mSelector = new Intent(o.mSelector);</div><div class="line">        &#125;</div><div class="line">        if (o.mClipData != null) &#123;</div><div class="line">            this.mClipData = new ClipData(o.mClipData);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以见到，我们的Intent是深度拷贝，而且是直接new一个的深度拷贝。可见其设计初衷不是因为其不是为了解决构建复杂对象的资源消耗问题。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>原型模式本质上就是对象拷贝，与 C++ 中的拷贝构造函数有些类似，它们之间容易出现的问题也都是深拷贝、浅拷贝。使用原型模式可以<strong>解决构建复杂对象的资源消耗问题</strong>，能够在某些场景下<strong>提升创建对象的效率</strong>。还有一个重要的途径就是保护性拷贝，也就是某个对象对外可能是只读的，为了防止外部对这个只读对象修改，通常可以通过返回一个对象拷贝的形式实现只读的限制。</li><li>优点：原型模式是在内存中二进制流的拷贝，要比直接 new 一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好滴体现其优点。</li><li>缺点：这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发中应该注意这个潜在问题</li></ul>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之观察者模式</title>
      <link href="/2016/12/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h1 id="设计模式之观察者模式"><a href="#设计模式之观察者模式" class="headerlink" title="设计模式之观察者模式"></a>设计模式之观察者模式</h1><h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h2><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变，所有依赖于它的对象都能得到通知并可以自动作出处理</p><p>…</p><a id="more"></a><p>比如说：报纸的订阅，一旦订阅，当有新的报纸发布，所有的订阅者都会收到消息</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol><li>观察者：Observer，也叫订阅者，即Subscriber（Rxjava）</li><li>被观察者：Observable</li></ol><h3 id="java中的体现"><a href="#java中的体现" class="headerlink" title="java中的体现"></a>java中的体现</h3><p>java中提供了<strong>Observable</strong>和<strong>Observe</strong>接口供我们快速实现这种模式</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li>假如有下面这样的一个实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Weather</span><span class="params">(String description)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Weather&#123;"</span> +</div><div class="line">                <span class="string">"description='"</span> + description + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>定义观察者接口（因为观察者可能有很多类型，所以我们定义成一个接口，如果想要订阅这个事件，实现这个接口即可，另外一般订阅之后，在实现接口中的方法的参数中会拿到发布的数据，数据的类型不固定所以这个观察者接口需要定义范型）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onUpdate</span><span class="params">(Observable&lt;T&gt; observable,T data)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>定义被观察者对象（可以设计成单例模式，类似EventBus，内部维持一个集合，用来保存观察者对象；register方法和unregister方法用来将观察者对象从集合中添加和移除出来，post方法用来发布，循环遍历集合，依次调用观察者的相关回调方法，并将发布的参数传入）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.it.fengan.designpattern.pattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by fengan on 2017/12/12.</div><div class="line"> * email:fengan1102@gmail.com</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Observable observable;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Observable <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (observable == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Observable.class) &#123;</div><div class="line">                <span class="keyword">if</span> (observable == <span class="keyword">null</span>) &#123;</div><div class="line">                    observable = <span class="keyword">new</span> Observable();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> observable;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Observer&lt;T&gt; observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (observer == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"observer error"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (Observable.class) &#123;</div><div class="line">            <span class="keyword">if</span> (!observers.contains(observer)) &#123;</div><div class="line">                observers.add(observer);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Observer&lt;T&gt; observer)</span> </span>&#123;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</div><div class="line">            observer.onUpdate(<span class="keyword">this</span>, data);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>注册和反注册过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObserver</span><span class="params">()</span> </span>&#123;</div><div class="line">        Observer&lt;Weather&gt; objectObserver1 = <span class="keyword">new</span> Observer&lt;Weather&gt;()&#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpdate</span><span class="params">(Observable&lt;Weather&gt; observable, Weather data)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"testObserver"</span>, <span class="string">"objectObserver1:data="</span> + data.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Observer&lt;Weather&gt; objectObserver2 = <span class="keyword">new</span> Observer&lt;Weather&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpdate</span><span class="params">(Observable&lt;Weather&gt; observable, Weather data)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"testObserver"</span>, <span class="string">"objectObserver2:data="</span> + data.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Observable observable = Observable.getInstance();</div><div class="line">        observable.register(objectObserver1);</div><div class="line">        observable.register(objectObserver2);</div><div class="line">        Weather weather = <span class="keyword">new</span> Weather(<span class="string">"晴天"</span>);</div><div class="line">        observable.post(weather);</div><div class="line">        observable.unregister(objectObserver2);</div><div class="line">        observable.post(weather);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>logcat输出</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">12</span><span class="number">-19</span> <span class="number">15</span>:<span class="number">18</span>:<span class="number">44.780</span> <span class="number">2004</span><span class="number">-2036</span><span class="regexp">/? E/</span><span class="string">testObserver:</span> <span class="string">objectObserver1:</span>data=Weather&#123;description=<span class="string">'晴天'</span>&#125;</div><div class="line"><span class="number">12</span><span class="number">-19</span> <span class="number">15</span>:<span class="number">18</span>:<span class="number">44.780</span> <span class="number">2004</span><span class="number">-2036</span><span class="regexp">/? E/</span><span class="string">testObserver:</span> <span class="string">objectObserver2:</span>data=Weather&#123;description=<span class="string">'晴天'</span>&#125;</div><div class="line"><span class="number">12</span><span class="number">-19</span> <span class="number">15</span>:<span class="number">18</span>:<span class="number">44.780</span> <span class="number">2004</span><span class="number">-2036</span><span class="regexp">/? E/</span><span class="string">testObserver:</span> <span class="string">objectObserver1:</span>data=Weather&#123;description=<span class="string">'晴天'</span>&#125;</div></pre></td></tr></table></figure><h2 id="Android中的应用"><a href="#Android中的应用" class="headerlink" title="Android中的应用"></a>Android中的应用</h2><ul><li>一对一的观察者（一般称之为回调，只有一个观察者）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Button btn=<span class="keyword">new</span> Button(<span class="keyword">this</span>);</div><div class="line">btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">Log.e(<span class="string">"TAG"</span>,<span class="string">"click"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>只要是set系列的设置监听器的方法最多都只能算回调，但是有一些监听器式add进去的，这种就是观察者模式了（比如RecyclerView中的addOnScrollListener方法）</li></ul><blockquote><p>RecycleView.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> List&lt;OnScrollListener&gt; mScrollListeners;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Add a listener that will be notified of any changes in scroll state or position.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Components that add a listener should take care to remove it when finished.</div><div class="line"> * Other components that take ownership of a view may call &#123;<span class="doctag">@link</span> #clearOnScrollListeners()&#125;</div><div class="line"> * to remove all attached listeners.&lt;/p&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> listener listener to set or null to clear</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOnScrollListener</span><span class="params">(OnScrollListener listener)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mScrollListeners == <span class="keyword">null</span>) &#123;</div><div class="line">        mScrollListeners = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    mScrollListeners.add(listener);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Remove a listener that was notified of any changes in scroll state or position.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> listener listener to set or null to clear</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeOnScrollListener</span><span class="params">(OnScrollListener listener)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mScrollListeners != <span class="keyword">null</span>) &#123;</div><div class="line">        mScrollListeners.remove(listener);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Remove all secondary listener that were notified of any changes in scroll state or position.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearOnScrollListeners</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mScrollListeners != <span class="keyword">null</span>) &#123;</div><div class="line">        mScrollListeners.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Android的广播机制，其本质也是观察者模式，这里为了简单方便，直接拿本地广播的代码说明，即LocalBroadcastManager</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LocalBroadcastManager localBroadcastManager=LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</div><div class="line">localBroadcastManager.registerReceiver(BroadcastReceiver receiver, IntentFilter filter);</div><div class="line">localBroadcastManager.unregisterReceiver(BroadcastReceiver receiver);</div><div class="line">localBroadcastManager.sendBroadcast(Intent intent)</div></pre></td></tr></table></figure><ul><li>开源库（EventBus）</li></ul><p>观察者模式的三个典型方法它都具有，即注册，取消注册，发送事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().register(Object subscriber);</div><div class="line">EventBus.getDefault().unregister(Object subscriber);</div><div class="line"></div><div class="line">EventBus.getDefault().post(Object event);</div></pre></td></tr></table></figure><ul><li>重量级的库，它就是RxJava</li></ul><p>创建一个被观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; myObservable = Observable.create(  </div><div class="line">    <span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; sub)</span> </span>&#123;  </div><div class="line">            sub.onNext(<span class="string">"Hello, world!"</span>);  </div><div class="line">            sub.onCompleted();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">);</div></pre></td></tr></table></figure><p>创建一个观察者，也就是订阅者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Subscriber&lt;String&gt; mySubscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123; System.out.println(s); &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; &#125;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>观察者进行事件的订阅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=453062799&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之策略模式</title>
      <link href="/2016/12/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h4 id="概念描述"><a href="#概念描述" class="headerlink" title="概念描述"></a>概念描述</h4><p>策略模式属于对象的行为模式，其用意是针对一组算法，将每一个算法封装到<strong>具有公共接口</strong>的<strong>独立的类</strong>中，从而在不影响客户端的情况下可以切换相应的算法。<br><a id="more"></a></p><h4 id="未使用策略模式案例"><a href="#未使用策略模式案例" class="headerlink" title="未使用策略模式案例"></a>未使用策略模式案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TravelStrategy</span> </span>&#123;</div><div class="line"><span class="keyword">enum</span> Strategy&#123;</div><div class="line">WALK,PLANE,SUBWAY</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> Strategy strategy;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TravelStrategy</span><span class="params">(Strategy strategy)</span></span>&#123;</div><div class="line"><span class="keyword">this</span>.strategy=strategy;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(strategy==Strategy.WALK)&#123;</div><div class="line">print(<span class="string">"walk"</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(strategy==Strategy.PLANE)&#123;</div><div class="line">print(<span class="string">"plane"</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(strategy==Strategy.SUBWAY)&#123;</div><div class="line">print(<span class="string">"subway"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"出行旅游的方式为："</span>+str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">TravelStrategy walk=<span class="keyword">new</span> TravelStrategy(Strategy.WALK);</div><div class="line">walk.travel();</div><div class="line"></div><div class="line">TravelStrategy plane=<span class="keyword">new</span> TravelStrategy(Strategy.PLANE);</div><div class="line">plane.travel();</div><div class="line"></div><div class="line">TravelStrategy subway=<span class="keyword">new</span> TravelStrategy(Strategy.SUBWAY);</div><div class="line">subway.travel();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过switch或者if语句，来判断选择哪一种策略算法，一旦策略增加或者减少修改，就不得不增加新的语句，这就违背了面向对象的原则之一，对修改封闭。</p><h4 id="使用策略模式案例"><a href="#使用策略模式案例" class="headerlink" title="使用策略模式案例"></a>使用策略模式案例</h4><p><strong>定义策略接口（抽象策略）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>将不同的算法封装到实现该策略接口的具体的类中（具体策略）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WalkStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"walk"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlaneStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"plane"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubwayStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"subway"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>策略环境（持有抽象策略引用的环境类）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TravelContext</span> </span>&#123;</div><div class="line">Strategy strategy;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Strategy <span class="title">getStrategy</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> strategy;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.strategy = strategy;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (strategy != <span class="keyword">null</span>) &#123;</div><div class="line">strategy.travel();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">TravelContext travelContext=<span class="keyword">new</span> TravelContext();</div><div class="line">travelContext.setStrategy(<span class="keyword">new</span> PlaneStrategy());</div><div class="line">travelContext.travel();</div><div class="line">travelContext.setStrategy(<span class="keyword">new</span> WalkStrategy());</div><div class="line">travelContext.travel();</div><div class="line">travelContext.setStrategy(<span class="keyword">new</span> SubwayStrategy());</div><div class="line">travelContext.travel();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>若想增加新的策略（添加新的策略实现类即可）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BikeStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"bike"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TravelContext travelContext=<span class="keyword">new</span> TravelContext();</div><div class="line">travelContext.setStrategy(<span class="keyword">new</span> BikeStrategy());</div><div class="line">travelContext.travel();</div></pre></td></tr></table></figure><p><strong>总结</strong></p><p>面向对象的<strong>对修改封闭</strong>，<strong>对扩展开放</strong>。</p><h4 id="Android源码中的使用"><a href="#Android源码中的使用" class="headerlink" title="Android源码中的使用"></a>Android源码中的使用</h4><ul><li><strong>属性动画的插值器</strong></li></ul><p>策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, T startValue, T endValue)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>多个策略实现例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> startInt = startValue;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(startInt + fraction * (endValue - startInt));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloatEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">Number</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Number startValue, Number endValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> startFloat = startValue.floatValue();</div><div class="line">        <span class="keyword">return</span> startFloat + fraction * (endValue.floatValue() - startFloat);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其他略…</p><h4 id="其他使用场景举例"><a href="#其他使用场景举例" class="headerlink" title="其他使用场景举例"></a>其他使用场景举例</h4><p><strong>例如：一个电商类平台等购物车系统，除了把货品的单价乘以数量之外，可能会有一些优惠活动。比如说，对高级会员提供5折优惠，对中级会员提供7折优惠，对初级会员提供9折优惠</strong></p><p>那么这就涉及到了三种算法</p><p><strong>首先定义折扣抽样策略接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberStrategy</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 计算图书的价格</div><div class="line">     * <span class="doctag">@param</span> booksPrice    图书的原价</div><div class="line">     * <span class="doctag">@return</span>    计算出打折后的价格</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcPrice</span><span class="params">(<span class="keyword">double</span> booksPrice)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>初级会员折扣策略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcPrice</span><span class="params">(<span class="keyword">double</span> booksPrice)</span> </span>&#123;</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"对于初级会员的9折折扣"</span>);</div><div class="line">        <span class="keyword">return</span> booksPrice*<span class="number">0.9</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvancedMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcPrice</span><span class="params">(<span class="keyword">double</span> booksPrice)</span> </span>&#123;</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"对于高级会员的折扣为5折"</span>);</div><div class="line">        <span class="keyword">return</span> booksPrice * <span class="number">0.5</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntermediateMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calcPrice</span><span class="params">(<span class="keyword">double</span> booksPrice)</span> </span>&#123;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"对于中级会员的折扣为7折"</span>);</div><div class="line">        <span class="keyword">return</span> booksPrice * <span class="number">0.7</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>策略环境类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Price</span> </span>&#123;</div><div class="line">    <span class="comment">//持有一个具体的策略对象</span></div><div class="line">    <span class="keyword">private</span> MemberStrategy strategy;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构造函数，传入一个具体的策略对象</div><div class="line">     * <span class="doctag">@param</span> strategy    具体的策略对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Price</span><span class="params">(MemberStrategy strategy)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.strategy = strategy;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 计算图书的价格</div><div class="line">     * <span class="doctag">@param</span> booksPrice    图书的原价</div><div class="line">     * <span class="doctag">@return</span>    计算出打折后的价格</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">quote</span><span class="params">(<span class="keyword">double</span> booksPrice)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.strategy.calcPrice(booksPrice);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//选择并创建需要使用的策略对象</span></div><div class="line">        MemberStrategy strategy = <span class="keyword">new</span> AdvancedMemberStrategy();</div><div class="line">        <span class="comment">//创建环境</span></div><div class="line">        Price price = <span class="keyword">new</span> Price(strategy);</div><div class="line">        <span class="comment">//计算价格</span></div><div class="line">        <span class="keyword">double</span> quote = price.quote(<span class="number">300</span>);</div><div class="line">        System.out.println(<span class="string">"图书的最终价格为："</span> + quote);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>可以看出</strong></p><ol><li>策略模式的重心不是提供算法，而是对多种算法的封装</li><li>各个算法相对独立平等</li><li>算法可以相互切换，但在同一时刻只能使用一种策略</li><li>面向对象的：对修改封闭，对拓展开放</li><li>避免使用switch和if多重条件语句，方便维护</li><li>缺点：客户端事先知道有多少种策略，并且每个策略的区别</li></ol><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28864975&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之建造者模式</title>
      <link href="/2016/12/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h1 id="设计模式之建造者模式"><a href="#设计模式之建造者模式" class="headerlink" title="设计模式之建造者模式"></a>设计模式之建造者模式</h1><h2 id="什么是Build模式"><a href="#什么是Build模式" class="headerlink" title="什么是Build模式"></a>什么是Build模式</h2><p>将一个复杂对象的构建与它的表示分离，使得构建过程可以以分部进行的链式调用来完成</p><p>…</p><a id="more"></a><h2 id="若不用Build模式"><a href="#若不用Build模式" class="headerlink" title="若不用Build模式"></a>若不用Build模式</h2><h3 id="定义一个Person类"><a href="#定义一个Person类" class="headerlink" title="定义一个Person类"></a>定义一个Person类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> height;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> height)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.height = height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.weight = weight;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="可能会定义一个构造方法。"><a href="#可能会定义一个构造方法。" class="headerlink" title="可能会定义一个构造方法。"></a>可能会定义一个构造方法。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> height, <span class="keyword">double</span> weight)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line"><span class="keyword">this</span>.age = age;</div><div class="line"><span class="keyword">this</span>.height = height;</div><div class="line"><span class="keyword">this</span>.weight = weight;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="对应不同的需求，可能会定义好几种构造方法"><a href="#对应不同的需求，可能会定义好几种构造方法" class="headerlink" title="对应不同的需求，可能会定义好几种构造方法"></a>对应不同的需求，可能会定义好几种构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line"><span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> height)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line"><span class="keyword">this</span>.age = age;</div><div class="line"><span class="keyword">this</span>.height = height;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用的时候就变成这样了"><a href="#使用的时候就变成这样了" class="headerlink" title="使用的时候就变成这样了"></a>使用的时候就变成这样了</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Person p1=<span class="keyword">new</span> Person();</div><div class="line">Person p2=<span class="keyword">new</span> Person(<span class="string">"张三"</span>);</div><div class="line">Person p3=<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">18</span>);</div><div class="line">Person p4=<span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">21</span>,<span class="number">180</span>);</div><div class="line">Person p5=<span class="keyword">new</span> Person(<span class="string">"赵六"</span>,<span class="number">17</span>,<span class="number">170</span>,<span class="number">65.4</span>);</div></pre></td></tr></table></figure><h3 id="这样的坏处："><a href="#这样的坏处：" class="headerlink" title="这样的坏处："></a>这样的坏处：</h3><ul><li>构造函数有多个参数，不好确定每个参数具体意思，可读性不强</li><li>若参数较多的时候，麻烦</li></ul><h2 id="若使用Builder模式"><a href="#若使用Builder模式" class="headerlink" title="若使用Builder模式"></a>若使用Builder模式</h2><h3 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> height;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight;</div><div class="line"></div><div class="line">    privatePerson(Builder builder) &#123;</div><div class="line">        <span class="keyword">this</span>.name=builder.name;</div><div class="line">        <span class="keyword">this</span>.age=builder.age;</div><div class="line">        <span class="keyword">this</span>.height=builder.height;</div><div class="line">        <span class="keyword">this</span>.weight=builder.weight;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> height)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.height = height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">double</span> weight)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.weight = weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">double</span> height;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">double</span> weight;</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">name</span><span class="params">(String name)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.name=name;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.age=age;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">height</span><span class="params">(<span class="keyword">double</span> height)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.height=height;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">weight</span><span class="params">(<span class="keyword">double</span> weight)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.weight=weight;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h3><ul><li>定义静态Builder类</li><li>Builder类中声明和外部类一样的变量</li><li>定义多个set方法，返回结果为Builder本身（this）</li><li>Builder类中增加build（）方法，返回外部类Person对象</li><li>外部类Person中声明一个参数为Builder的构造函数</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Person.Builder builder=<span class="keyword">new</span> Person.Builder();</div><div class="line">Person person=builder</div><div class="line">.name(<span class="string">"张三"</span>)</div><div class="line">.age(<span class="number">18</span>)</div><div class="line">.height(<span class="number">178.5</span>)</div><div class="line">.weight(<span class="number">67.4</span>)</div><div class="line">.build();</div></pre></td></tr></table></figure><h2 id="Android中哪些地方使用到Builder模式"><a href="#Android中哪些地方使用到Builder模式" class="headerlink" title="Android中哪些地方使用到Builder模式"></a>Android中哪些地方使用到Builder模式</h2><h3 id="对话框的创建，AlertDialog"><a href="#对话框的创建，AlertDialog" class="headerlink" title="对话框的创建，AlertDialog"></a>对话框的创建，AlertDialog</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">AlertDialog.Builder builder=<span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">AlertDialog dialog=builder.setTitle(<span class="string">"标题"</span>)</div><div class="line">.setIcon(android.R.drawable.ic_dialog_alert)</div><div class="line">.setView(R.layout.myview)</div><div class="line">.setPositiveButton(R.string.positive, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">.setNegativeButton(R.string.negative, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">.create();</div><div class="line">dialog.show();</div></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=487379429&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/2016/12/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h1 id="Android设计模式-单例模式"><a href="#Android设计模式-单例模式" class="headerlink" title="Android设计模式-单例模式"></a>Android设计模式-单例模式</h1><ul><li>什么是单例模式</li></ul><p>使用时，单例模式的对象只有一个实例存在，不允许自由的构造对象</p><ul><li>单例模式使用场景</li></ul><p>确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例</p><p>… …</p><a id="more"></a><ul><li>如何使用单例</li></ul><ol><li>私有构造函数，禁止外部使用构造函数创建对象</li><li>通过一个静态方法或者枚举来提供返回单例实例</li><li>确保单例类的对象在反序列化的时候不会重新构建对象</li><li>确保在多线程下，也只有一个实例</li></ol><ul><li>单例模式分类</li></ul><h3 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1,饿汉式"></a>1,饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2,懒汉式"></a>2,懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>饿汉式和懒汉式的区别</p></blockquote><p>饿汉式：在声明静态对象的时候就初始化</p><p>懒汉式：声明一个静态变量，并且在用户第一次调用getInstance的时候进行初始化</p><p>​        优点：单例在使用的时候才会初始化，一定程度上节约了资源</p><p>​                缺点：第一次加载的时候会初始化，反应稍慢，最大的问题是每次调用getInstance都进行同步，造成了不必要的同步开销，一般不介意这么用。</p><h3 id="3-Double-check-lock（DCL）"><a href="#3-Double-check-lock（DCL）" class="headerlink" title="3,Double check lock（DCL）"></a>3,Double check lock（DCL）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                instance = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>DCL  :</p><p>介绍DCL 在getInstance 方法中 对instance 进行两次判空：相信很多人对此都有些疑惑。为什么要判断两次，第一个判空是为了避免不必要的同步，第二层判断是为了在null 情况下创建实例。instance=new Singleton(); 语句看起来是有代码，单实际是一个原子操作，最终会被编译成多条汇编指令，大致做了三件事：</p><p>1.给Singleton 分配内存</p><p>2.调用Singleton 的构造函数，初始化成员字段</p><p>3.将instance 对象指向分配的内存空间（此时instance 就不是null 了）但是jdk 1.5 以后java 编译器允许乱序执行 。所以执行顺序可能是1-3-2 或者 1-2-3.如果是前者先执行3 的话 切换到其他线程，instance 此时 已经是非空了，此线程就会直接取走instance ，直接使用，这样就回出错。DCL 失效。解决方法 SUN 官方已经给我们了。将instance 定义成 privatevolatilestatic Singleton instance =null: </p><p>即可DCL 的优点，资源利用率高，第一次执行getInstance 时才会被实例化，效率高。缺点：第一次加载反应慢，也由于java 内存 模型的原因偶尔会失败，在高并发环境下，有一定缺陷，虽然发生概率很小。(很常用)</p><h3 id="4-静态内部类单例模式"><a href="#4-静态内部类单例模式" class="headerlink" title="4.静态内部类单例模式"></a>4.静态内部类单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>加载singleton 类时不会初始化instance 只有在调用getInstance 方法时，才会导致instance 被初始化,这个方法不仅能够确保线程安全，也能够保证 单例对象的唯一性,同时也延迟了单例的实例化，是<strong>推荐使用</strong>的单例模式实现方式。</p><h3 id="5，防止反序列化过程中创建多个对象"><a href="#5，防止反序列化过程中创建多个对象" class="headerlink" title="5，防止反序列化过程中创建多个对象"></a>5，防止反序列化过程中创建多个对象</h3><p>加入下列方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Singleton <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</div><div class="line">    <span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而当实现了readResolve方法后，jvm就会有readResolve返回指定对象，也就保证了单例性。实验证明，如果没有声明readResolve方法，存入对象的hashcode和取出对象的hashcode不一致。</p><p>推荐下列方式（如果需要序列化的话）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Singleton <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="6-volatile关键字的使用"><a href="#6-volatile关键字的使用" class="headerlink" title="6,volatile关键字的使用"></a>6,volatile关键字的使用</h3><p>当一个变量定义为 volatile 之后，将具备两种特性：</p><p>　　1.保证此变量对所有的线程的可见性，这里的“可见性”，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：<a href="http://www.cnblogs.com/zhengbin/p/6407137.html" target="_blank" rel="external">Java内存模型</a>）来完成。</p><p>　　2.禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个<strong>内存屏障</strong>（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。</p><p>volatile 性能：</p><p>　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p><h3 id="7-Android源码或者框架使用"><a href="#7-Android源码或者框架使用" class="headerlink" title="7,Android源码或者框架使用"></a>7,Android源码或者框架使用</h3><ul><li>ImageLoader</li><li>EventBus</li><li>InputMethodManager</li><li>AccessibilityManager</li><li>ActivityManager(自定义关闭所有Activity的工具类)</li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=471797594&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>随滑动改变的的动态矩形背景</title>
      <link href="/2016/10/11/%E9%9A%8F%E6%BB%91%E5%8A%A8%E6%94%B9%E5%8F%98%E7%9A%84%E7%9A%84%E5%8A%A8%E6%80%81%E7%9F%A9%E5%BD%A2%E8%83%8C%E6%99%AF/"/>
      <content type="html"><![CDATA[<h1 id="随滑动改变的动态矩形背景"><a href="#随滑动改变的动态矩形背景" class="headerlink" title="随滑动改变的动态矩形背景"></a>随滑动改变的动态矩形背景</h1><blockquote><p>前言</p></blockquote><p>可能看到这个标题有点懵逼,本屌的表达能力有限,最近工作比较清闲,朋友公司正在做到这个效果,所以就帮基友写了一个小Demo,总体来说就是以下效果.</p><p>github移步:<br><a href="https://github.com/itfengan/DynamicRectangleView" target="_blank" rel="external">https://github.com/itfengan/DynamicRectangleView</a></p><a id="more"></a><blockquote><p>朋友公司需要达到的效果</p></blockquote><p><img src="http://img.blog.csdn.net/20171011155803164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><blockquote><p>Demo中的效果</p></blockquote><p><img src="http://img.blog.csdn.net/20171011155905764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h2><blockquote><p>layout</p></blockquote><pre><code>&lt;com.fengan.dynamicrectangledemo.DynamicRectangleViewandroid:id=&quot;@+id/drv&quot;android:layout_width=&quot;match_parent&quot;android:layout_height=&quot;250dp&quot;app:fengan_limit_percent=&quot;0.2&quot;app:fengan_percent=&quot;0.5&quot;&gt;&lt;/com.fengan.dynamicrectangledemo.DynamicRectangleView&gt;</code></pre><blockquote><p>code</p></blockquote><pre><code> @Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    SeekBar seekBar = (SeekBar) findViewById(R.id.sb);    final DynamicRectangleView dynamicRectangleView = (DynamicRectangleView) findViewById(R.id.drv);    seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {        @Override        public void onProgressChanged(SeekBar seekBar, int i, boolean b) {            dynamicRectangleView.setPercent((float)i/100);        }        @Override        public void onStartTrackingTouch(SeekBar seekBar) {        }        @Override        public void onStopTrackingTouch(SeekBar seekBar) {        }    });    findViewById(R.id.btn_scrollview).setOnClickListener(new View.OnClickListener() {        @Override        public void onClick(View view) {            startActivity(new Intent(MainActivity.this,ScrollViewActivity.class));        }    });}</code></pre><blockquote><p>attrs.xml(有灵性的哥哥们应该猜得到分别对应的什么意思咯)</p></blockquote><pre><code>&lt;resources&gt;&lt;declare-styleable name=&quot;DynamicRectangleView&quot;&gt;    &lt;attr name=&quot;fengan_percent&quot; format=&quot;float&quot;/&gt;    &lt;attr name=&quot;fengan_limit_percent&quot; format=&quot;float&quot;/&gt;    &lt;attr name=&quot;fengan_start_color&quot; format=&quot;color&quot;/&gt;    &lt;attr name=&quot;fengan_end_color&quot; format=&quot;color&quot;/&gt;&lt;/declare-styleable&gt;&lt;/resources&gt;</code></pre><ol><li>fengan_percent:右侧短边占左侧的百分比</li><li>fengan_limit_percent:当滑动到最小的百分比</li><li>fengan_start_color:渐变色的初始颜色(ps:朋友公司效果图是渐变色,当然也可以不需要)</li><li>fengan_end_color:渐变色的终止颜色</li></ol><blockquote><p>DynamicRectangleView.java</p></blockquote><pre><code>package com.fengan.dynamicrectangledemo;import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.LinearGradient;import android.graphics.Paint;import android.graphics.Path;import android.graphics.Shader;import android.util.AttributeSet;import android.util.Log;import android.view.View;/** * Created by fengan on 2017/10/11/011.     */public class DynamicRectangleView extends View {// Default  valuesprivate final static int DEFAULT_START_COLOR = Color.parseColor(&quot;#88D94600&quot;);private final static int DEFAULT_END_COLOR = Color.parseColor(&quot;#D94600&quot;);private final static float DEFAULT_PERCENT = (float) 0.5;//右边高度占左边高度的百分比private final static float DEFAULT_LIMIT_PERCENT = (float) 0.2;//最小高度占左边高度的百分比private Paint mPaint;private float OriginalRightHeight;private float OriginalLeftHeight;private float currentRightHeight;private float currentLeftHeight;private float minHeight;private float maxHeight;private int mStartColor;private int mEndColor;private float mPercent;private float mLimitPercent;private Path mPath;public DynamicRectangleView(Context context) {    this(context, null);}public DynamicRectangleView(Context context, AttributeSet attrs) {    this(context, attrs, 0);}public DynamicRectangleView(Context context, AttributeSet attrs, int defStyleAttr) {    super(context, attrs, defStyleAttr);    // Retrieve attributes from xml    final TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.DynamicRectangleView);    try {        mPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_PERCENT);        mLimitPercent = typedArray.getFloat(R.styleable.DynamicRectangleView_fengan_percent, DEFAULT_LIMIT_PERCENT);        mStartColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_start_color, DEFAULT_START_COLOR);        mEndColor = typedArray.getColor(R.styleable.DynamicRectangleView_fengan_end_color, DEFAULT_END_COLOR);    } finally {        typedArray.recycle();    }    initView(context);}private void initView(Context context) {    mPaint = new Paint();    mPath = new Path();    mPaint.setAntiAlias(true);//        mPaint.setColor(Color.RED);//纯色}@Overrideprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {    super.onMeasure(widthMeasureSpec, heightMeasureSpec);}@Overrideprotected void onSizeChanged(int w, int h, int oldw, int oldh) {    super.onSizeChanged(w, h, oldw, oldh);    OriginalLeftHeight = getMeasuredHeight();    OriginalRightHeight = getMeasuredHeight()*mPercent;    minHeight = getMeasuredHeight() *mLimitPercent;    maxHeight = OriginalRightHeight;    //设置当前高度    currentRightHeight = OriginalRightHeight;    currentLeftHeight = OriginalLeftHeight;    // LinearGradient 第一个参数第二个参数为 起始位置x,y  三四参数为终点位置x,y。    // 如果x不变则为y轴渐变， y不变则为x轴渐变    // 第五个参数为颜色渐变，此处为红色渐变为绿色    // 第七个参数为渐变次数，可repeat    Shader mShader = new LinearGradient(0, 0, maxHeight, maxHeight,            new int[]{mStartColor, mEndColor},            null, Shader.TileMode.CLAMP);    // Shader.TileMode三种模式    // REPEAT:沿着渐变方向循环重复    // CLAMP:如果在预先定义的范围外画的话，就重复边界的颜色    // MIRROR:与REPEAT一样都是循环重复，但这个会对称重复    mPaint.setShader(mShader);// 用Shader中定义定义的颜色来话}@Overrideprotected void onDraw(Canvas canvas) {    super.onDraw(canvas);    mPath.reset();    mPath.moveTo(0, 0);    mPath.lineTo(getMeasuredWidth(), 0);    mPath.lineTo(getMeasuredWidth(), currentRightHeight);    mPath.lineTo(0, currentLeftHeight);    mPath.close();    canvas.drawPath(mPath, mPaint);}public void setPercent(float percent) {    Log.e(&quot;fengan&quot;, &quot;percent=&quot; + percent);    currentRightHeight = OriginalRightHeight * (1 - percent);    currentLeftHeight = OriginalLeftHeight * (1 - percent);    if (currentLeftHeight &lt; minHeight) {        currentLeftHeight = minHeight;    }    if (currentRightHeight &lt; minHeight) {        currentRightHeight = minHeight;    }    postInvalidate();}}</code></pre><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=455345562&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android7.0之广播变动</title>
      <link href="/2016/08/23/Android7-0%E4%B9%8B%E5%B9%BF%E6%92%AD%E5%8F%98%E5%8A%A8/"/>
      <content type="html"><![CDATA[<h4 id="Android7-0的后台优化"><a href="#Android7-0的后台优化" class="headerlink" title="Android7.0的后台优化"></a>Android7.0的后台优化</h4><p>Android中有一些系统的隐式广播,我们可以利用这些广播注册BroadCastReceiver来监听,比如手机网络变动(Wifi的时候自动下载更新包,发送错误日志),当这些广播到来的时候(网络从Wifi到移动数据来回切换的时候),后台会频繁的启动已经监听这些的应用,并且现在很多应用都会注册这些广播(如网络变化),那么就会带来大量的电量消耗,所以Android7.0中删除了三项隐式广播,又花了内存和电量的消耗</p><a id="more"></a><h4 id="具体体现"><a href="#具体体现" class="headerlink" title="具体体现"></a>具体体现</h4><ul><li>Android7.0以上应用不会接受和发送以下三种广播</li></ul><ol><li>CONNECTIVITY_ACTION广播:网络状态改变</li><li>ACTION_NEW_PICTURE广播:一个新的相机,拍照和图片的添加</li><li>ACTION_NEW_VIDEO广播:一个新的视频摄像记录下来</li></ol><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>可以使用JobScheduler API(Android5.0提供),任务调度,可以使你再未来的某个时间点满足某个特定条件执行一个任务(当设备连接到Wifi,连通电源适配器的时候),具体用法以后再次整理.</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gson封装</title>
      <link href="/2016/08/21/Gson%E5%B0%81%E8%A3%85/"/>
      <content type="html"><![CDATA[<p>Gson封装</p><ul><li>Gson封装的工具类</li><li>javabean和集合相互转换</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by fengan on 2017/7/6/006.</div><div class="line"> */</div><div class="line"></div><div class="line">import com.google.gson.Gson;</div><div class="line">import com.google.gson.JsonArray;</div><div class="line">import com.google.gson.JsonElement;</div><div class="line">import com.google.gson.JsonParser;</div><div class="line">import com.google.gson.reflect.TypeToken;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.<span class="keyword">List</span>;</div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Gson gson = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">if</span> (gson == <span class="keyword">null</span>) &#123;</div><div class="line">            gson = <span class="keyword">new</span> Gson();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> GsonUtil() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转成json</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> object</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String GsonString(Object object) &#123;</div><div class="line">        String gsonString = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (gson != <span class="keyword">null</span>) &#123;</div><div class="line">            gsonString = gson.toJson(object);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> gsonString;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转成bean</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> gsonString</div><div class="line">     * <span class="doctag">@param</span> cls</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T GsonToBean(String gsonString, <span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">cls</span>) </span>&#123;</div><div class="line">        T t = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (gson != <span class="keyword">null</span>) &#123;</div><div class="line">            t = gson.fromJson(gsonString, cls);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转成list</div><div class="line">     * 泛型在编译期类型被擦除导致报错</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> gsonString</div><div class="line">     * <span class="doctag">@param</span> cls</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">List</span>&lt;T&gt; GsonToList(String gsonString, <span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">cls</span>) </span>&#123;</div><div class="line">        <span class="keyword">List</span>&lt;T&gt; <span class="keyword">list</span> = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (gson != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">list</span> = gson.fromJson(gsonString, <span class="keyword">new</span> TypeToken&lt;<span class="keyword">List</span>&lt;T&gt;&gt;() &#123;</div><div class="line">            &#125;.getType());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">list</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转成list</div><div class="line">     * 解决泛型问题</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> json</div><div class="line">     * <span class="doctag">@param</span> cls</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">List</span>&lt;T&gt; jsonToList(String json, <span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">cls</span>) </span>&#123;</div><div class="line">        Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">        <span class="keyword">List</span>&lt;T&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line">        JsonArray <span class="keyword">array</span> = <span class="keyword">new</span> JsonParser().parse(json).getAsJsonArray();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> JsonElement elem : <span class="keyword">array</span>) &#123;</div><div class="line">            <span class="keyword">list</span>.add(gson.fromJson(elem, cls));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">list</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转成list中有map的</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> gsonString</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">List</span>&lt;Map&lt;String, T&gt;&gt; GsonToListMaps(String gsonString) &#123;</div><div class="line">        <span class="keyword">List</span>&lt;Map&lt;String, T&gt;&gt; <span class="keyword">list</span> = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (gson != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">list</span> = gson.fromJson(gsonString,</div><div class="line">                    <span class="keyword">new</span> TypeToken&lt;<span class="keyword">List</span>&lt;Map&lt;String, T&gt;&gt;&gt;() &#123;</div><div class="line">                    &#125;.getType());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">list</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 转成map的</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> gsonString</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Map&lt;String, T&gt; GsonToMaps(String gsonString) &#123;</div><div class="line">        Map&lt;String, T&gt; map = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (gson != <span class="keyword">null</span>) &#123;</div><div class="line">            map = gson.fromJson(gsonString, <span class="keyword">new</span> TypeToken&lt;Map&lt;String, T&gt;&gt;() &#123;</div><div class="line">            &#125;.getType());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=415792881&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>view被软键盘挡住和点击外部软键盘消失</title>
      <link href="/2016/08/21/view%E8%A2%AB%E8%BD%AF%E9%94%AE%E7%9B%98%E6%8C%A1%E4%BD%8F%E5%92%8C%E7%82%B9%E5%87%BB%E5%A4%96%E9%83%A8%E8%BD%AF%E9%94%AE%E7%9B%98%E6%B6%88%E5%A4%B1/"/>
      <content type="html"><![CDATA[<h1 id="软键盘遮挡和点击空白区域关闭键盘"><a href="#软键盘遮挡和点击空白区域关闭键盘" class="headerlink" title="软键盘遮挡和点击空白区域关闭键盘"></a>软键盘遮挡和点击空白区域关闭键盘</h1><ul><li>登陆button挡住输入框</li><li>软键盘弹出挡住其他控件</li><li>软键盘弹出，点击空白区域关闭软件盘</li></ul><a id="more"></a><h3 id="设置：点击button，键盘将button顶上去"><a href="#设置：点击button，键盘将button顶上去" class="headerlink" title="设置：点击button，键盘将button顶上去"></a>设置：点击button，键盘将button顶上去</h3><blockquote><p><img src="http://img.blog.csdn.net/20170615102440904?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmVuZ2FuaXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="引用块内容"></p></blockquote><pre><code>//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。public  boolean flag = true;/** * @param act          activiry用于获取底部导航栏高度。 * @param root         最外层布局，需要调整的布局 * @param scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部 */public  void controlKeyboardLayout(Context act, final View root, final View scrollToView) {    final int navigationBarHeight = getNavigationBarHeight(act);    root.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {        @Override        public void onGlobalLayout() {            Rect rect = new Rect();            //获取root在窗体的可视区域            root.getWindowVisibleDisplayFrame(rect);            //获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)            int rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;            //若不可视区域高度大于100，则键盘显示            if (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) {                int[] location = new int[2];                //获取scrollToView在窗体的坐标                scrollToView.getLocationInWindow(location);                //计算root滚动高度，使scrollToView在可见区域                int srollHeight = (location[1] + scrollToView.getHeight()) - rect.bottom;                if (root.getScrollY() != 0) {// 如果已经滚动，要根据上次滚动，重新计算位置。                    srollHeight += root.getScrollY();                }                root.scrollTo(0, srollHeight);            } else {                //键盘隐藏                root.scrollTo(0, 0);            }        }    });}</code></pre><h3 id="解决控制点击可选择的区域让软键盘消失或者不消失"><a href="#解决控制点击可选择的区域让软键盘消失或者不消失" class="headerlink" title="解决控制点击可选择的区域让软键盘消失或者不消失"></a>解决控制点击可选择的区域让软键盘消失或者不消失</h3><pre><code>  /** * 获取底部导航栏高度 * * @param act * @return */private  int getNavigationBarHeight(Context act) {    Resources resources = act.getResources();    int resourceId = resources.getIdentifier(&quot;navigation_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;);    int height = resources.getDimensionPixelSize(resourceId);    Log.v(&quot;dbw&quot;, &quot;Navi height:&quot; + height);    return height;}//软键盘消失的管理//region软键盘的处理/** * 清除editText的焦点 * * @param v   焦点所在View * @param ids 输入框 */public void clearViewFocus(View v, int... ids) {    if (null != v &amp;&amp; null != ids &amp;&amp; ids.length &gt; 0) {        for (int id : ids) {            if (v.getId() == id) {                v.clearFocus();                break;            }        }    }}/** * 隐藏键盘 * * @param v   焦点所在View * @param ids 输入框 * @return true代表焦点在edit上 */public boolean isFocusEditText(View v, int... ids) {    if (v instanceof EditText) {        EditText tmp_et = (EditText) v;        for (int id : ids) {            if (tmp_et.getId() == id) {                return true;            }        }    }    return false;}//是否触摸在指定view上面,对某个控件过滤public boolean isTouchView(View[] views, MotionEvent ev) {    if (views == null || views.length == 0) return false;    int[] location = new int[2];    for (View view : views) {        view.getLocationOnScreen(location);        int x = location[0];        int y = location[1];        if (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) {            return true;        }    }    return false;}//region 右滑返回上级@Overridepublic boolean dispatchTouchEvent(MotionEvent ev) {    if (ev.getAction() == MotionEvent.ACTION_DOWN) {        if (isTouchView(filterViewByIds(), ev)) return super.dispatchTouchEvent(ev);        if (hideSoftByEditViewIds() == null || hideSoftByEditViewIds().length == 0)            return super.dispatchTouchEvent(ev);        View v = getCurrentFocus();        if (isFocusEditText(v, hideSoftByEditViewIds())) {            //隐藏键盘            hideInputForce(this);            clearViewFocus(v, hideSoftByEditViewIds());        }    }    return super.dispatchTouchEvent(ev);}/** * 传入EditText的Id * 没有传入的EditText不做处理 * * @return id 数组 */public int[] hideSoftByEditViewIds() {    return null;}/** * 传入要过滤的View * 过滤之后点击将不会有隐藏软键盘的操作 * * @return id 数组 */public View[] filterViewByIds() {    return null;}/** * des:隐藏软键盘,这种方式参数为activity * * @param activity */public static void hideInputForce(Activity activity) {    if (activity == null || activity.getCurrentFocus() == null)        return;    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))            .hideSoftInputFromWindow(activity.getCurrentFocus()                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);}</code></pre><h3 id="以下Demo全部代码"><a href="#以下Demo全部代码" class="headerlink" title="以下Demo全部代码"></a>以下Demo全部代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> EditText mEt1;</div><div class="line"><span class="keyword">private</span> EditText mEt2;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    Button btn = (Button) findViewById(R.id.btn);</div><div class="line">    mEt1 = (EditText) findViewById(R.id.et1);</div><div class="line">    mEt2 = (EditText) findViewById(R.id.et2);</div><div class="line">    LinearLayout LL = (LinearLayout) findViewById(R.id.LL);</div><div class="line">    controlKeyboardLayout(<span class="keyword">this</span>,LL,btn);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//    控制是否移动布局。比如只有密码输入框获取到焦点时才执行。</span></div><div class="line"><span class="keyword">public</span>  <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> act          activiry用于获取底部导航栏高度。</div><div class="line"> * <span class="doctag">@param</span> root         最外层布局，需要调整的布局</div><div class="line"> * <span class="doctag">@param</span> scrollToView 被键盘遮挡的scrollToView，滚动root,使scrollToView在root可视区域的底部</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">controlKeyboardLayout</span><span class="params">(Context act, <span class="keyword">final</span> View root, <span class="keyword">final</span> View scrollToView)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> navigationBarHeight = getNavigationBarHeight(act);</div><div class="line"></div><div class="line">    root.getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">            Rect rect = <span class="keyword">new</span> Rect();</div><div class="line">            <span class="comment">//获取root在窗体的可视区域</span></div><div class="line">            root.getWindowVisibleDisplayFrame(rect);</div><div class="line">            <span class="comment">//获取root在窗体的不可视区域高度(被其他View遮挡的区域高度)</span></div><div class="line">            <span class="keyword">int</span> rootInvisibleHeight = root.getRootView().getHeight() - rect.bottom;</div><div class="line">            <span class="comment">//若不可视区域高度大于100，则键盘显示</span></div><div class="line">            <span class="keyword">if</span> (rootInvisibleHeight &gt; navigationBarHeight &amp;&amp; flag) &#123;</div><div class="line">                <span class="keyword">int</span>[] location = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">                <span class="comment">//获取scrollToView在窗体的坐标</span></div><div class="line">                scrollToView.getLocationInWindow(location);</div><div class="line">                <span class="comment">//计算root滚动高度，使scrollToView在可见区域</span></div><div class="line">                <span class="keyword">int</span> srollHeight = (location[<span class="number">1</span>] + scrollToView.getHeight()) - rect.bottom;</div><div class="line">                <span class="keyword">if</span> (root.getScrollY() != <span class="number">0</span>) &#123;<span class="comment">// 如果已经滚动，要根据上次滚动，重新计算位置。</span></div><div class="line">                    srollHeight += root.getScrollY();</div><div class="line">                &#125;</div><div class="line">                root.scrollTo(<span class="number">0</span>, srollHeight);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//键盘隐藏</span></div><div class="line">                root.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取底部导航栏高度</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> act</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">int</span> <span class="title">getNavigationBarHeight</span><span class="params">(Context act)</span> </span>&#123;</div><div class="line">    Resources resources = act.getResources();</div><div class="line">    <span class="keyword">int</span> resourceId = resources.getIdentifier(<span class="string">"navigation_bar_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>);</div><div class="line">    <span class="keyword">int</span> height = resources.getDimensionPixelSize(resourceId);</div><div class="line">    Log.v(<span class="string">"dbw"</span>, <span class="string">"Navi height:"</span> + height);</div><div class="line">    <span class="keyword">return</span> height;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//软键盘消失的管理</span></div><div class="line"><span class="comment">//region软键盘的处理</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 清除editText的焦点</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> v   焦点所在View</div><div class="line"> * <span class="doctag">@param</span> ids 输入框</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearViewFocus</span><span class="params">(View v, <span class="keyword">int</span>... ids)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != v &amp;&amp; <span class="keyword">null</span> != ids &amp;&amp; ids.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> id : ids) &#123;</div><div class="line">            <span class="keyword">if</span> (v.getId() == id) &#123;</div><div class="line">                v.clearFocus();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 隐藏键盘</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> v   焦点所在View</div><div class="line"> * <span class="doctag">@param</span> ids 输入框</div><div class="line"> * <span class="doctag">@return</span> true代表焦点在edit上</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFocusEditText</span><span class="params">(View v, <span class="keyword">int</span>... ids)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (v <span class="keyword">instanceof</span> EditText) &#123;</div><div class="line">        EditText tmp_et = (EditText) v;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> id : ids) &#123;</div><div class="line">            <span class="keyword">if</span> (tmp_et.getId() == id) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//是否触摸在指定view上面,对某个控件过滤</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTouchView</span><span class="params">(View[] views, MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (views == <span class="keyword">null</span> || views.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span>[] location = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    <span class="keyword">for</span> (View view : views) &#123;</div><div class="line">        view.getLocationOnScreen(location);</div><div class="line">        <span class="keyword">int</span> x = location[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> y = location[<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth())</div><div class="line">                &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight())) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//region 右滑返回上级</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">        <span class="keyword">if</span> (isTouchView(filterViewByIds(), ev)) <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</div><div class="line">        <span class="keyword">if</span> (hideSoftByEditViewIds() == <span class="keyword">null</span> || hideSoftByEditViewIds().length == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</div><div class="line">        View v = getCurrentFocus();</div><div class="line">        <span class="keyword">if</span> (isFocusEditText(v, hideSoftByEditViewIds())) &#123;</div><div class="line">            <span class="comment">//隐藏键盘</span></div><div class="line">            hideInputForce(<span class="keyword">this</span>);</div><div class="line">            clearViewFocus(v, hideSoftByEditViewIds());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 传入EditText的Id</div><div class="line"> * 没有传入的EditText不做处理</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> id 数组</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] hideSoftByEditViewIds() &#123;</div><div class="line">    <span class="keyword">int</span> []  ids = &#123;R.id.et1,R.id.et2&#125;;</div><div class="line">    <span class="keyword">return</span> ids;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 传入要过滤的View</div><div class="line"> * 过滤之后点击将不会有隐藏软键盘的操作</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> id 数组</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> View[] filterViewByIds() &#123;</div><div class="line">    View [] views = &#123;mEt1,mEt2&#125;;<span class="comment">//点击这两个控件,软键盘不会消失</span></div><div class="line">    <span class="keyword">return</span> views;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * des:隐藏软键盘,这种方式参数为activity</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> activity</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hideInputForce</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (activity == <span class="keyword">null</span> || activity.getCurrentFocus() == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    ((InputMethodManager) activity.getSystemService(INPUT_METHOD_SERVICE))</div><div class="line">            .hideSoftInputFromWindow(activity.getCurrentFocus()</div><div class="line">                    .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="以下是布局文件"><a href="#以下是布局文件" class="headerlink" title="以下是布局文件"></a>以下是布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line"><span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line"><span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line"><span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line"><span class="attr">tools:context</span>=<span class="string">"fengan.softinputdemo.MainActivity"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/LL"</span></div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/et1"</span></div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"60dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#ff0"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span>/&gt;</div><div class="line"><span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/et2"</span></div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#ff0"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span>/&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"软键盘挡住button"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/btn"</span></div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>可以将隐藏显示的代码封装到BaseActivity</li></ul><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=448707059&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>保存图片到本地</title>
      <link href="/2016/08/21/%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
      <content type="html"><![CDATA[<h1 id="Android保存图片到本地"><a href="#Android保存图片到本地" class="headerlink" title="Android保存图片到本地"></a>Android保存图片到本地</h1><blockquote><p>需求</p></blockquote><p>一个很常见的需求,查看大图的同时,点击可以将图片保存到本地<br><a id="more"></a></p><blockquote><p>我的步骤</p></blockquote><ol><li>使用Gilde获取图片的Drawable</li><li>Drawable转成Bitmap</li><li>bigtmap压缩并通过流写入</li><li>通知系统图库更新</li></ol><blockquote><p>代码块</p></blockquote><ul><li>保存图片,流写入,压缩</li><li><pre><code>public static void saveImageToGallery(Context context, Bitmap bmp) {// 首先保存图片File appDir = new File(Environment.getExternalStorageDirectory(), &quot;nongfaziran&quot;);if (!appDir.exists()) {    appDir.mkdir();}String fileName = System.currentTimeMillis() + &quot;.jpg&quot;;File file = new File(appDir, fileName);try {    FileOutputStream fos = new FileOutputStream(file);    bmp.compress(Bitmap.CompressFormat.JPEG, 100, fos);    fos.flush();    fos.close();} catch (FileNotFoundException e) {    e.printStackTrace();} catch (IOException e) {    e.printStackTrace();}// 其次把文件插入到系统图库try {    MediaStore.Images.Media.insertImage(context.getContentResolver(),            file.getAbsolutePath(), fileName, null);} catch (FileNotFoundException e) {    e.printStackTrace();}// 最后通知图库更新context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(new File(file.getPath()))));ToastUtil.showShort(&quot;保存到&quot; + file.getPath());</code></pre><p>  }`</p><blockquote><p>通过glide回调,获取图片Drawable</p></blockquote></li></ul><pre><code>  mTvSave.setOnClickListener(new View.OnClickListener() {    @Override    public void onClick(View v) {        showLoadding();        GlideUtils.loadImage(Utils.getContext(), urls.get(mViewPager.getCurrentItem()), mIvImg,new GlideUtils.ImageLoadListener&lt;String, GlideDrawable&gt;() {            @Override            public void onLoadingComplete(String uri, ImageView view, GlideDrawable resource) {                hideLoadding();                FileUtils.saveImageToGallery(Utils.getContext(), BitmapUtils.drawableToBitmap(resource));                showState(&quot;保存成功&quot;,1);            }            @Override            public void onLoadingError(String source, Exception e) {                hideLoadding();                showState(&quot;保存失败&quot;,0);                ToastUtil.showShort(&quot;请检查SD卡并检查网络&quot;);            }        });    }});</code></pre><blockquote><p>分享一个Glide封装</p></blockquote><pre><code>/** * Glide封装类 * Created by fengan on 2017/5/6. * Last Update on 2017.6.22 。 添加注解提醒、返回类型、优化代码 */public abstract class GlideUtils {/** * 简单图片加载回调 * * @param &lt;T&gt; 图片url 或资源id 或 文件 * @param &lt;K&gt; 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置 */public interface ImageLoadListener&lt;T, K&gt; {    /**     * 图片加载成功回调     *     * @param uri      图片url 或资源id 或 文件     * @param view     目标载体，不传则为空     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置     */    void onLoadingComplete(T uri, ImageView view, K resource);    /**     * 图片加载异常返回     *     * @param source 图片地址、File、资源id     * @param e      异常信息     */    void onLoadingError(T source, Exception e);}/** * 详细加载图片加载回调 * * @param &lt;T&gt; 图片url 或资源id 或 文件 * @param &lt;K&gt; 返回的资源 */public interface ImageLoadDetailListener&lt;T, K&gt; {    /**     * 图片加载成功回调     *     * @param uri      图片url 或资源id 或 文件     * @param view     目标载体，不传则为空     * @param resource 返回的资源,GlideDrawable或者Bitmap或者GifDrawable,ImageView.setImageRecourse设置     */    void onLoadingComplete(T uri, ImageView view, K resource);    /**     * 图片加载异常返回     *     * @param source        图片地址、File、资源id     * @param errorDrawable 加载错误占位图     * @param e             异常信息     */    void onLoadingError(T source, Drawable errorDrawable, Exception e);    /**     * 加载开始     *     * @param source      图片来源     * @param placeHolder 开始加载占位图     */    void onLoadingStart(T source, Drawable placeHolder);}/** * 根据上下文和 url获取 Glide的DrawableTypeRequest * * @param context 上下文 * @param url     图片连接 * @param &lt;T&gt;     Context类型 * @param &lt;K&gt;     url类型 * @return 返回DrawableTypeRequst&lt;K&gt; 类型 */private static &lt;T, K&gt; DrawableTypeRequest&lt;K&gt; getDrawableTypeRequest(T context, K url) {    DrawableTypeRequest&lt;K&gt; type = null;    try {        if (context instanceof android.support.v4.app.Fragment) {            type = Glide.with((android.support.v4.app.Fragment) context).load(url);        } else if (context instanceof android.app.Fragment) {            type = Glide.with((android.app.Fragment) context).load(url);        } else if (context instanceof Activity) {    //包括FragmentActivity            type = Glide.with((Activity) context).load(url);        } else if (context instanceof Context) {            type = Glide.with((Context) context).load(url);        }    } catch (Exception e) {        e.printStackTrace();    }    return type;}/** * 图片加载监听类 * * @param &lt;T&gt; 图片链接 的类型 * @param &lt;K&gt; 图片资源返回类型 * @param &lt;Z&gt; 返回的图片url */private static class GlideListener&lt;T, K, Z&gt; implements RequestListener&lt;T, K&gt; {    ImageLoadListener&lt;Z, K&gt; imageLoadListener = null;    Z url;    ImageView imageView = null;    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url, ImageView view) {        this.imageLoadListener = imageLoadListener;        this.url = url;        this.imageView = view;    }    GlideListener(ImageLoadListener&lt;Z, K&gt; imageLoadListener, Z url) {        this.imageLoadListener = imageLoadListener;        this.url = url;    }    GlideListener(Z url) {        this.url = url;    }    @Override    public boolean onResourceReady(K resource, T model, Target&lt;K&gt; target, boolean isFromMemoryCache, boolean isFirstResource) {        if (null != imageLoadListener) {            if (imageView != null) {                imageLoadListener.onLoadingComplete(url, imageView, resource);            } else {                imageLoadListener.onLoadingComplete(url, null, resource);            }        }        return false;    }    @Override    public boolean onException(Exception e, T model, Target&lt;K&gt; target, boolean isFirstResource) {        //LogUtil.e(&quot;Glide图片加载失败:&quot;+e + &quot; 地址为:&quot;+url);        if (imageLoadListener != null) {            imageLoadListener.onLoadingError(url, e);        }        return false;    }}/** * 获取存储器上的图片,回调返回GlideDrawable * * @param context           上下文年 * @param file              文件File * @param imageLoadListener 回调监听器 */public static &lt;T&gt; DrawableRequestBuilder&lt;File&gt; loadImage(T context, @NonNull File file, @NonNull ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {    DrawableTypeRequest&lt;File&gt; type = getDrawableTypeRequest(context, file);    if (type != null) {        return type.listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file));    } else {        return null;    }}/** * 获取资源中的图片，回调返回GlideDrawable * * @param context           上下文 * @param resourceId        资源id * @param imageLoadListener 回调监听器 */public static &lt;T&gt; DrawableRequestBuilder&lt;Integer&gt; loadImage(T context, @DrawableRes int resourceId, @NonNull ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {    DrawableTypeRequest&lt;Integer&gt; type = getDrawableTypeRequest(context, resourceId);    if (type != null) {        return type.listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId));    } else {        return null;    }}/** * 获取网络图片，回调返回 GlideDrawable * * @param context           上下文 * @param url               图片url * @param imageLoadListener 回调监听器 */public static &lt;T&gt; DrawableRequestBuilder&lt;String&gt; loadImage(T context, @NonNull final String url, @NonNull ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener) {    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);    if (type != null) {        return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url));    } else {        return null;    }}/** * 加载存储器上的图片到目标载体 * * @param file      文件File * @param imageView 要显示到的图片ImageView */public static Target&lt;GlideDrawable&gt; loadImage(@NonNull final File file, @NonNull ImageView imageView, ImageLoadListener&lt;File, GlideDrawable&gt; imageLoadListener) {    return getDrawableTypeRequest(imageView.getContext(), file)            .diskCacheStrategy(DiskCacheStrategy.NONE)//禁用磁盘缓存            .skipMemoryCache(true)//跳过内存缓存            .dontAnimate()            .listener(new GlideListener&lt;File, GlideDrawable, File&gt;(imageLoadListener, file, imageView))            .into(imageView);}/** * 加载资源中的图片到目标载体 * * @param resourceId 资源id * @param imageView  图片View */public static Target&lt;GlideDrawable&gt; loadImage(@DrawableRes int resourceId, @NonNull ImageView imageView, ImageLoadListener&lt;Integer, GlideDrawable&gt; imageLoadListener) {    return getDrawableTypeRequest(imageView.getContext(), resourceId)            .listener(new GlideListener&lt;Integer, GlideDrawable, Integer&gt;(imageLoadListener, resourceId, imageView))            .into(imageView);}/** * 加载成圆形头像到普通ImageView，有动画效果 * * @param url               图片url * @param imageView         要显示到的ImageView * @param imageLoadListener 加载回调监听器 * @param parms             设置占位符和加载失败图片(可变参数默认两张,第一张为占位符,第二张是默认图片) * @return 返回Target&lt;GlideDrawable&gt; */public static Target&lt;GlideDrawable&gt; loadCircleImage(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(), url);    if (parms != null &amp;&amp; parms.length &gt; 0) {        type.placeholder(parms[0]);   //占位符        if (parms.length &gt; 1) {            type.error(parms[1]);    //图片加载失败显示图片        }    }    type.transform(new CircleTransform(imageView.getContext()));    return type.listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))            .into(imageView);}/** * 加载网络图片到指定Imageview，支持CircleImageView * * @param url               图片url * @param imageView         要显示的Imageview * @param imageLoadListener 图片加载回调 * @param parms             第一个是error的图片 */public static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImage(T context, @NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GlideDrawable&gt; imageLoadListener, int... parms) {    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);    if (type != null) {        type.asBitmap();        if (parms != null &amp;&amp; parms.length &gt; 0) {            type.placeholder(parms[0]);   //占位符            if (parms.length &gt; 1) {                type.error(parms[1]);    //图片加载失败显示图片            }        }        //单张CircleImageView不允许动画，不然会不显示,        if (imageView instanceof nfzr.zr.nf.nfzr.com.nongfaziran.nfzr.view.CircleImageView) {            type.dontAnimate();        }        return type                .listener(new GlideListener&lt;String, GlideDrawable, String&gt;(imageLoadListener, url, imageView))                .into(imageView);    } else {        return null;    }}/** * 加载一帧视频，添加圆角 * * @param url       图片地址 * @param imageView 要加载到的ImageView */public static Target&lt;GlideDrawable&gt; loadImageFormVideo(@NonNull String url, @NonNull ImageView imageView) {    return getDrawableTypeRequest(imageView.getContext(), url)            .override(SizeUtil.dp2px(150), SizeUtil.dp2px(150))            //.placeholder(android.R.drawable.picture_frame)   //占位图            .dontAnimate()            .into(imageView);}public static &lt;T&gt; Target&lt;GlideDrawable&gt; loadImageDetail(final T context, @NonNull final String url, @NonNull final ImageView imageView, final Drawable drawable, final ImageLoadDetailListener&lt;String, GlideDrawable&gt; imageLoadListener) {    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);    if (type != null) {        return type.into(new SimpleTarget&lt;GlideDrawable&gt;() {            @Override            public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) {                if (imageView != null &amp;&amp; resource != null) {                    imageView.setImageDrawable(resource);                }                if (imageLoadListener != null) {                    imageLoadListener.onLoadingComplete(url, imageView, resource);                }            }            @Override            public void onStart() {                super.onStart();                if (drawable != null &amp;&amp; imageView != null) {                    imageView.setImageDrawable(drawable);                }            }            @Override            public void onLoadStarted(Drawable placeholder) {                super.onLoadStarted(placeholder);                if (imageLoadListener != null) {                    imageLoadListener.onLoadingStart(url, placeholder);                }            }            @Override            public void onLoadFailed(Exception e, Drawable errorDrawable) {                super.onLoadFailed(e, errorDrawable);                if (imageLoadListener != null) {                    imageLoadListener.onLoadingError(url, errorDrawable, e);                }            }        });    } else {        return null;    }}/** * 加载bitmap，回调返回 Bitmap * * @param context           上下文 * @param url               图片url * @param imageLoadListener 图片加载监听器 * @param &lt;T&gt;               上下文类型 */public static &lt;T&gt; BitmapRequestBuilder&lt;String, Bitmap&gt; loadImageBitmap(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener) {    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);    if (type != null) {        return type.asBitmap()                .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url));    }else{        return null;    }}/** * 加载GifDrawable，回调返回 GifDrawable * * @param context           上下文 * @param url               图片url * @param imageLoadListener 图片加载监听器 */public static &lt;T&gt; GifRequestBuilder&lt;String&gt; loadImageGif(T context, @NonNull String url,@NonNull ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(context, url);    if (type != null) {        return type.asGif()                .diskCacheStrategy(DiskCacheStrategy.SOURCE)                .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url));    }else{        return null;    }}/** * 加载Gif的一张图片到ImageView * * @param url               图片url * @param imageLoadListener 图片加载监听器 *                          @param imageView  *                          @param drawable 缩略图，可以为空 */public static Target&lt;Bitmap&gt; loadImageGifSingle(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, Bitmap&gt; imageLoadListener, Drawable drawable) {    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);    return type.asBitmap()            .placeholder(drawable)            .diskCacheStrategy(DiskCacheStrategy.SOURCE)            .listener(new GlideListener&lt;String, Bitmap, String&gt;(imageLoadListener, url))            .into(imageView);}/** * 加载gif图片到指定ImageView * * @param url               图片Url * @param imageView         图片View * @param imageLoadListener 图片加载监听器 */public static Target&lt;GifDrawable&gt; loadImageGif(@NonNull String url, @NonNull ImageView imageView, ImageLoadListener&lt;String, GifDrawable&gt; imageLoadListener) {    DrawableTypeRequest&lt;String&gt; type = getDrawableTypeRequest(imageView.getContext(),url);    return type.asGif()            .diskCacheStrategy(DiskCacheStrategy.SOURCE)            .listener(new GlideListener&lt;String, GifDrawable, String&gt;(imageLoadListener, url, imageView))            .into(imageView);}/** * 释放内存 * * @param context 上下文 */public static void clearMemory(Context context) {    Glide.get(context).clearMemory();}/** * 取消所有正在下载或等待下载的任务。 * * @param context 上下文 */public static void cancelAllTasks(Context context) {    Glide.with(context).pauseRequests();}/** * 恢复所有任务 */public static void resumeAllTasks(Context context) {    Glide.with(context).resumeRequests();}/** * 清除磁盘缓存 * * @param context 上下文 */public static void clearDiskCache(final Context context) {    new Thread(new Runnable() {        @Override        public void run() {            Glide.get(context).clearDiskCache();        }    }).start();}/** * 清除所有缓存 * * @param context 上下文 */public static void cleanAll(Context context) {    clearDiskCache(context);    clearMemory(context);}</code></pre><p>}<br>`</p><hr><pre><code>/** * Created by fengan on 2017/5/25. */public class CircleTransform extends BitmapTransformation {public CircleTransform(Context context) {    super(context);}@Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {    return circleCrop(pool, toTransform);}private static Bitmap circleCrop(BitmapPool pool, Bitmap source) {    if (source == null) return null;    int size = Math.min(source.getWidth(), source.getHeight());    int x = (source.getWidth() - size) / 2;    int y = (source.getHeight() - size) / 2;    Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);    Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);    if (result == null) {        result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);    }    Canvas canvas = new Canvas(result);    Paint paint = new Paint();    paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));    paint.setAntiAlias(true);    float r = size / 2f;    canvas.drawCircle(r, r, r, paint);    return result;}@Override public String getId() {    return getClass().getName();}}</code></pre><p>Drawable转bigmap</p><pre><code>public class BitmapUtils {public static Bitmap drawableToBitmap(Drawable drawable) {    Bitmap bitmap = Bitmap.createBitmap(            drawable.getIntrinsicWidth(),            drawable.getIntrinsicHeight(),            drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888                    : Bitmap.Config.RGB_565);    Canvas canvas = new Canvas(bitmap);    //canvas.setBitmap(bitmap);    drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());    drawable.draw(canvas);    return bitmap;}}</code></pre><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=423849475&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android7.0之应用间共享文件</title>
      <link href="/2016/07/23/Android7-0%E4%B9%8B%E5%BA%94%E7%94%A8%E9%97%B4%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/"/>
      <content type="html"><![CDATA[<h2 id="Android7-0适配之应用间共享文件"><a href="#Android7-0适配之应用间共享文件" class="headerlink" title="Android7.0适配之应用间共享文件"></a>Android7.0适配之应用间共享文件</h2><h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><p>Android N(API 25),打开相册编辑页面crash,报出FileUriExposedException异常</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    android<span class="selector-class">.os</span><span class="selector-class">.FileUriExposedException</span>: file:<span class="comment">////storage/emulated/0/temp/1474956193735.jpg exposed beyond app through Intent.getData()</span></div><div class="line">at android<span class="selector-class">.os</span><span class="selector-class">.StrictMode</span><span class="selector-class">.onFileUriExposed</span>(StrictMode<span class="selector-class">.java</span>:<span class="number">1799</span>)</div><div class="line">at android<span class="selector-class">.net</span><span class="selector-class">.Uri</span><span class="selector-class">.checkFileUriExposed</span>(Uri<span class="selector-class">.java</span>:<span class="number">2346</span>)</div><div class="line">at android<span class="selector-class">.content</span><span class="selector-class">.Intent</span><span class="selector-class">.prepareToLeaveProcess</span>(Intent<span class="selector-class">.java</span>:<span class="number">8933</span>)</div><div class="line">at android<span class="selector-class">.content</span><span class="selector-class">.Intent</span><span class="selector-class">.prepareToLeaveProcess</span>(Intent<span class="selector-class">.java</span>:<span class="number">8894</span>)</div><div class="line">at android<span class="selector-class">.app</span><span class="selector-class">.Instrumentation</span><span class="selector-class">.execStartActivity</span>(Instrumentation<span class="selector-class">.java</span>:<span class="number">1517</span>)</div><div class="line">at android<span class="selector-class">.app</span><span class="selector-class">.Activity</span><span class="selector-class">.startActivityForResult</span>(Activity<span class="selector-class">.java</span>:<span class="number">4223</span>)</div><div class="line">...</div><div class="line">at android<span class="selector-class">.app</span><span class="selector-class">.Activity</span><span class="selector-class">.startActivityForResult</span>(Activity<span class="selector-class">.java</span>:<span class="number">4182</span>)</div></pre></td></tr></table></figure><a id="more"></a><h3 id="查找原因"><a href="#查找原因" class="headerlink" title="查找原因"></a>查找原因</h3><p>Android N的应用,API禁止向应用外公开file://URI,如果一项包含文件URI的Intent离开应用, 应用crash并报FileUriExposedException异常</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>若想要在应用间共享文件,应该发送一项content://URI,并该URI临时访问权限,进行此授权的方式是通过FileProvider类 </p><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><h4 id="1-清单文件"><a href="#1-清单文件" class="headerlink" title="[1] 清单文件"></a>[1] 清单文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">    <span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.fengan.providerdemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!--authorities="你的包名+fileprovider" --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">            <span class="attr">android:authorities</span>=<span class="string">"com.fengan.providerdemo.fileprovider"</span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></div><div class="line">            <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">                <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></div><div class="line">                <span class="attr">android:resource</span>=<span class="string">"@xml/filepaths"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="2-res下xml文件夹"><a href="#2-res下xml文件夹" class="headerlink" title="[2] res下xml文件夹"></a>[2] res下xml文件夹</h4><p><img src="./1485158383668.png" alt="Alt text"><br>注意xml文件名和清单文件中@xml/filepaths相同<br>xml文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">paths</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- external-path:sd ；path:你的应用保存文件的根目录；name随便定义--&gt;</span></div><div class="line">    //<span class="tag">&lt;<span class="name">external-path</span> <span class="attr">path</span>=<span class="string">"fengan_imgs/"</span> <span class="attr">name</span>=<span class="string">"files_path"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"files_path"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></div></pre></td></tr></table></figure><p>注意:<br>path=””,有特殊意义,它代表更目录,也就是说可以向应用共享根目录及其子目录下任何一个文件,如果将path写为path=”fengan_imgs/“,那么只能在fengan_imgs/目录下才可以分享!<br>[3]核心代码<br>将File转换为uri</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Uri getUriForFile(Context context, <span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">       <span class="keyword">if</span> (context == <span class="keyword">null</span> || <span class="keyword">file</span> == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">       &#125;</div><div class="line">       Uri uri;</div><div class="line">       <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">24</span>) &#123;</div><div class="line">       <span class="comment">//和android:authorities="com.fengan.providerdemo.fileprovider"对应</span></div><div class="line">           uri = FileProvider.getUriForFile(context.getApplicationContext(), <span class="string">"com.fengan.providerdemo.fileprovider"</span>, <span class="keyword">file</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           uri = Uri.fromFile(<span class="keyword">file</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> uri;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><ul><li>Uri的scheme类型为file,改成了又FileProvider创建一个content类型的Uri打开相机,打印该Uri为content://com.fengan.providerdemo/files_path/temp/1474960080319.jpg`。<br>//其中camera_photos就是file_paths.xml中paths的name。</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 打开相机</div><div class="line">    * 兼容7.0</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> activity    Activity</div><div class="line">    * <span class="doctag">@param</span> file        File</div><div class="line">    * <span class="doctag">@param</span> requestCode result requestCode</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">startActionCapture</span><span class="params">(Activity activity, File file, <span class="keyword">int</span> requestCode)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (activity == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">       Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); <span class="comment">//添加这一句表示对目标应用临时授权该Uri所代表的文件</span></div><div class="line">       intent.putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, file));<span class="comment">//拍取照片保存到指定Uri</span></div><div class="line">       activity.startActivityForResult(intent, requestCode);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>针对涉及到从Android设备上获取照片(拍照,或从相册,文件中选择)打开相机,裁剪图片,压缩图片,可以使用一个轻量级开源库,TakePhoto!<br><a href="https://github.com/crazycodeboy/TakePhoto/" target="_blank" rel="external">https://github.com/crazycodeboy/TakePhoto/</a></li></ul>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>回顾集合体系</title>
      <link href="/2015/12/26/%E5%9B%9E%E9%A1%BE%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB/"/>
      <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>面向对象语言对事物的体现都是以对象的形式，所以为了方便对多个对象进行操作，就需要对对象进行存储</li><li>数组虽然可以存储对象，但是长度上固定的</li><li>集合的长度是可变的</li><li>数组中<strong>可以</strong>存储基本数据类型</li><li>集合中<strong>只能</strong>存储对象</li></ul><a id="more"></a><h4 id="集合体系图"><a href="#集合体系图" class="headerlink" title="集合体系图"></a>集合体系图</h4><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmwkdnlaooj30i80budid.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjo9kq19j31kw15d15f.jpg" alt="集合体系图"></p><h4 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h4><ul><li>Iterator接口，这是一个用于遍历集合中元素的接口</li><li>主要包含hashNext(),next(),remove()三种方法</li><li>它的一个子接口LinkedIterator在它的基础上又添加了三种方法，分别是add(),previous(),hasPrevious()</li><li>Iterator接口，那么在遍历集合中元素的时候，只能往后遍历，被遍历后的元素不会在遍历到，通常无序集合实现的都是这个接口，比如HashSet，HashMap</li><li>元素有序的集合，实现的一般都是LinkedIterator接口，实现这个接口的集合可以双向遍历，既可以通过next()访问下一个元素，又可以通过previous()访问前一个元素，比如ArrayList。</li></ul><h4 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h4><ul><li>Collection是集合类根接口，衍生出两个子类接口List和Set</li><li>Collection定义了集合框架的共性功能</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmwjn5w2rrj31a00ls122.jpg" alt="Collection接口体系图"></p><h5 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h5><p>List里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。</p><ul><li><strong>ArrayList：</strong>线程不安全，查询速度快，元素有序，可重复</li><li><strong>Vector：</strong>线程安全，但速度慢，已被ArrayList替代</li><li><strong>LinkedList：</strong>链表结构，增删速度快</li></ul><p>LinkedList经常用在增删操作较多而查询操作很少的情况下，ArrayList则相反</p><h5 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h5><p>Set里存放的对象是无序（存入和取出的顺序不一定一致），不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。</p><ul><li><strong>HashSet：</strong>：</li></ul><ol><li>底层数据结构是哈希表。是线程不安全的。不同步</li><li>通过元素的两个方法，hashCode和equals来保证唯一性</li><li>如果元素的HashCode值相同，才会判断equals是否为true。</li><li>如果元素的hashcode值不同，不会调用equals。</li><li>无序</li></ol><ul><li><strong>TreeSet：</strong></li></ul><ol><li>有序</li><li>线程不安全，可以对Set集合中的元素进行排序</li><li>通过compareTo或者compare方法来保证元素的唯一性，元素以二叉树的形式存放。</li></ol><h4 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h4><ul><li>Map提供了一种映射关系，元素是以键值对（key-value）的形式存储的，能根据key快速查找value；</li><li>Map中的键值对以Entry类型的对象实例形式存在；</li><li>key值不能重复，value值可以重复；</li></ul><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><p>底层是哈希表数据结构，允许使用 null 值和 null 键，该集合是不同步的。将hashtable替代，jdk1.2.效率高。</p><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><p>底层是二叉树数据结构。线程不同步。可以用于给map集合中的键进行排序。</p><h4 id="集合输出（遍历）"><a href="#集合输出（遍历）" class="headerlink" title="集合输出（遍历）"></a>集合输出（遍历）</h4><ul><li>Iterator： 迭代输出，使用最多的输出方式</li><li>ListIterator：是Iterator的子接口，专门用于输出List中的内容。</li><li>foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。</li><li>for循环</li></ul><h4 id="集合的工具类"><a href="#集合的工具类" class="headerlink" title="集合的工具类"></a>集合的工具类</h4><p>Collections:集合框架的工具类。里面定义的都是静态方法。</p><p>　　Collections和Collection有什么区别？</p><p>　　　　Collection是集合框架中的一个顶层接口，它里面定义了单列集合的共性方法。</p><p>　　　　　　它有两个常用的子接口，</p><p>　　　　　　——List：对元素都有定义索引。有序的。可以重复元素。</p><p>　　　　　　——Set：不可以重复元素。无序。</p><p>　　　　Collections是集合框架中的一个工具类。该类中的方法都是静态的。</p><p>　　　　　　提供的方法中有可以对list集合进行排序，二分查找等方法。</p><p>　　　　　　通常常用的集合都是线程不安全的。因为要提高效率。</p><p>　　　　　　如果多线程操作这些集合时，可以通过该工具类中的同步方法，将线程不安全的集合，转换成安全的。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>List：add/remove/get/set。</p><p>　　　　1，ArrayList：其实就是数组，容量一大，频繁增删就是噩梦，适合随机查找；</p><p>　　　　2，LinkedList：增加了push/[pop|remove|pull]，其实都是removeFirst；</p><p>　　　　3，Vector：历史遗留产物，同步版的ArrayList，代码和ArrayList太像；</p><p>　　　　4，Stack：继承自Vector。Java里其实没有纯粹的Stack，可以自己实现，用组合的方式，封装一下LinkedList即可；</p><p>　　　　5，Queue：本来是单独的一类，不过在SUN的JDK里就是用LinkedList来提供这个功能的，主要方法是offer/pull/peek，因此归到这里呢。</p><p>　　Set：add/remove。可以用迭代器或者转换成list。</p><p>　　　　1，HashSet：内部采用HashMap实现的；</p><p>　　　　2，LinkedHashSet：采用LinkedHashMap实现；</p><p>　　　　3，TreeSet：TreeMap。</p><p>　　Map：put/get/remove。</p><p>　　　　1，HashMap/HashTable：散列表，和ArrayList一样采用数组实现，超过初始容量会对性能有损耗；</p><p>　　　　2，LinkedHashMap：继承自HashMap，但通过重写嵌套类HashMap.Entry实现了链表结构，同样有容量的问题；</p><p>　　　　3，Properties：是继承的HashTable。</p><p>　　　　顺便说一下Arrays.asList，这个方法的实现依赖一个嵌套类，这个嵌套类也叫ArrayList！</p><h4 id="手写集合"><a href="#手写集合" class="headerlink" title="手写集合"></a>手写集合</h4><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 手写ArrayList  </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span></span>&#123;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Object[] value = <span class="keyword">null</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;  </div><div class="line">  </div><div class="line">    MyArrayList() &#123;  </div><div class="line">        value = <span class="keyword">new</span> Object[<span class="number">10</span>];  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Object obj)</span></span>&#123;  </div><div class="line">        <span class="keyword">if</span>(size == value.length)  </div><div class="line">            expansion();  </div><div class="line">        value[size++]=obj;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> value[index];  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object obj)</span></span>&#123;  </div><div class="line">        Object[] obj2 = <span class="keyword">new</span> Object[size];  </div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;  </div><div class="line">            <span class="keyword">if</span>(!(value[i].toString().equals(obj.toString())))&#123;  </div><div class="line">                obj2[index] = value[i];  </div><div class="line">                index ++;  </div><div class="line">            &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                id ++ ;  </div><div class="line">                <span class="keyword">if</span>(id == <span class="number">1</span>)  </div><div class="line">                    size --;  </div><div class="line">                <span class="keyword">else</span>&#123;  </div><div class="line">                    obj2[index] = value[i];  </div><div class="line">                    index ++;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        value = obj2;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"null"</span>)  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,Object obj)</span></span>&#123;  </div><div class="line">        Object[] newObj = <span class="keyword">new</span> Object[size];;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;  </div><div class="line">            <span class="keyword">if</span>(i == index)  </div><div class="line">                newObj[i] = obj;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">                newObj[i] = value[i];  </div><div class="line">        &#125;  </div><div class="line">        value = newObj;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> size;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">expansion</span><span class="params">()</span> </span>&#123;  </div><div class="line">        Object[] temp = <span class="keyword">new</span> Object[value.length + <span class="number">5</span>];  </div><div class="line">        temp = value.clone();  </div><div class="line">        <span class="comment">/** </span></div><div class="line">        * 注意：clone只对一维数组起作用，而不能用于二维数组， 因为java没有二维数组的概念，而只有数组的数组，二维 </div><div class="line">        * 数组存储的是几个一维数组的引用，而使用clone也只是 拷贝了这几个引用，说白了还是原来那几个一维数组对象。 </div><div class="line">        * 如果想用于二维数组，那么就遍历其中的一维数组，挨个 拷贝一维数组到目标二维数组中的一维数组下。 </div><div class="line">        */  </div><div class="line">        value = temp;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;  </div><div class="line">        size = <span class="number">0</span>;  </div><div class="line">        value = <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        MyArrayList ma = <span class="keyword">new</span> MyArrayList();  </div><div class="line">        ma.add(<span class="string">"hello"</span>);  </div><div class="line">        ma.add(<span class="string">"world"</span>);  </div><div class="line">        ma.add(<span class="string">"java"</span>);  </div><div class="line">        System.out.println(ma.get(<span class="number">1</span>));  </div><div class="line">        System.out.println(ma.size());  </div><div class="line">        ma.set(<span class="number">1</span>, <span class="string">"new"</span>);  </div><div class="line">        System.out.println(ma.get(<span class="number">1</span>));  </div><div class="line">        System.out.println(ma.size());  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>LinkedList</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">AnyType</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">AnyType</span>&gt;</span>&#123;</div><div class="line">        <span class="keyword">public</span> AnyType data;</div><div class="line">        <span class="keyword">public</span> Node&lt;AnyType&gt; prev;</div><div class="line">        <span class="keyword">public</span> Node&lt;AnyType&gt; next;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(AnyType d, Node&lt;AnyType&gt; p, Node&lt;AnyType&gt; n)</span></span>&#123;</div><div class="line">            data = d;</div><div class="line">            prev = p;</div><div class="line">            next = n;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> theSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> modCount;</div><div class="line">    <span class="keyword">private</span> Node&lt;AnyType&gt; beginMarker;</div><div class="line">    <span class="keyword">private</span> Node&lt;AnyType&gt; endMarker;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span><span class="params">()</span></span>&#123;</div><div class="line">        clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">        beginMarker = <span class="keyword">new</span> Node&lt;AnyType&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        endMarker = <span class="keyword">new</span> Node&lt;AnyType&gt;(<span class="keyword">null</span>, beginMarker, <span class="keyword">null</span>);</div><div class="line">        beginMarker.next = endMarker;</div><div class="line">        theSize = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> theSize;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(AnyType x)</span></span>&#123;</div><div class="line">        add(size(), x);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> idx, AnyType x)</span></span>&#123;</div><div class="line">        addBefore(getNode(idx), x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> AnyType <span class="title">get</span><span class="params">(<span class="keyword">int</span> idx)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> getNode(idx).data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Node&lt;AnyType&gt; p, AnyType x)</span></span>&#123;</div><div class="line">        Node&lt;AnyType&gt; newNode = <span class="keyword">new</span> Node&lt;AnyType&gt;(x, p.prev, p);</div><div class="line">        newNode.prev.next = newNode;</div><div class="line">        p.prev = newNode;</div><div class="line">        theSize++;</div><div class="line">        modCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Node&lt;AnyType&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> idx)</span></span>&#123;</div><div class="line">        Node&lt;AnyType&gt; p;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(idx &lt; <span class="number">0</span> || idx &gt; size())&#123;</div><div class="line">            System.out.println(<span class="string">"IndexOutOfBoundsException"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(idx &lt;= size()/<span class="number">2</span>)&#123;</div><div class="line">            System.out.println(idx);</div><div class="line">            p = beginMarker.next;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; idx; i++)&#123;</div><div class="line">                p = p.next;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            p = endMarker;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = size(); i &gt; idx; i--)&#123;</div><div class="line">                p = p.prev;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> p;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(AnyType x)</span></span>&#123;</div><div class="line">        Node&lt;AnyType&gt; p = beginMarker.next;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(p.data == x)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            p = p.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</div><div class="line">        String s = <span class="string">""</span>;</div><div class="line">        Node&lt;AnyType&gt; p = beginMarker.next;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)&#123;</div><div class="line">            s += p.data +<span class="string">","</span>;</div><div class="line">            p = p.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HandlerThread</title>
      <link href="/2015/12/22/HandlerThread/"/>
      <content type="html"><![CDATA[<p><strong>HandlerThread</strong></p><p> <strong>官方介绍</strong></p><blockquote><p>Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.</p></blockquote><p>意思就是HandlerThread能够新建拥有Looper的线程(除了主线程,我们新建线程是需要手动调用Looper.prepare来初始化looper和messagequeue的),而这个looper能够来新建其他的Handler(新建的这个handler是属于子线程的,并且looper和messagequeue都是初始化好了的)<br><strong>如以下代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mHandlerThread = <span class="keyword">new</span> HandlerThread(<span class="string">"check-message-coming"</span>);<span class="comment">//the name of the new thread</span></div><div class="line">        mHandlerThread.start();</div><div class="line"></div><div class="line">        mThreadHandler = <span class="keyword">new</span> Handler(mHandlerThread.getLooper())<span class="comment">//拥有子线程looper的handler</span></div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span></div><div class="line">            &#123;</div><div class="line">                update();<span class="comment">//模拟数据更新</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> (isUpdateInfo)</div><div class="line">                    mThreadHandler.sendEmptyMessage(MSG_UPDATE_INFO);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line"> <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">        <span class="comment">//释放资源</span></div><div class="line">        myHandlerThread.quit() ;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//其他线程可以拿mThreadHandler发消息了，来完成向该HandlerThread线程通讯</span></div></pre></td></tr></table></figure><p>mThreadHandler构建的时候,传的是HandlerThread的looper对象,也就是说这个mThreadHandler是属于子线程的管理的,他的handlerMessage的回调中是可以做耗时操作的(切记,是不能做更新UI的操作的,如需要更新,需要用主线程的handler发消息来更新,或者使用runOnUiThread或者eventBus等其他方式来刷新ui)</p><p><strong>退出循环</strong></p><p>Looper是通过调用loop方法驱动着消息循环的进行: 从MessageQueue中阻塞式地取出一个消息，然后让Handler处理该消息，周而复始，loop方法是个死循环方法。</p><p>那如何终止消息循环呢？我们可以调用Looper的quit方法或quitSafely方法，二者稍有不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Quits the looper.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Causes the &#123;<span class="doctag">@link</span> #loop&#125; method to terminate without processing any</div><div class="line">     * more messages in the message queue.</div><div class="line">     * &lt;/p&gt;&lt;p&gt;</div><div class="line">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</div><div class="line">     * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</div><div class="line">     * &lt;/p&gt;&lt;p class="note"&gt;</div><div class="line">     * Using this method may be unsafe because some messages may not be delivered</div><div class="line">     * before the looper terminates.  Consider using &#123;<span class="doctag">@link</span> #quitSafely&#125; instead to ensure</div><div class="line">     * that all pending work is completed in an orderly manner.</div><div class="line">     * &lt;/p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #quitSafely</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</div><div class="line">        mQueue.quit(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Quits the looper safely.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * Causes the &#123;<span class="doctag">@link</span> #loop&#125; method to terminate as soon as all remaining messages</div><div class="line">     * in the message queue that are already due to be delivered have been handled.</div><div class="line">     * However pending delayed messages with due times in the future will not be</div><div class="line">     * delivered before the loop terminates.</div><div class="line">     * &lt;/p&gt;&lt;p&gt;</div><div class="line">     * Any attempt to post messages to the queue after the looper is asked to quit will fail.</div><div class="line">     * For example, the &#123;<span class="doctag">@link</span> Handler#sendMessage(Message)&#125; method will return false.</div><div class="line">     * &lt;/p&gt;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</div><div class="line">        mQueue.quit(<span class="keyword">true</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p><strong>quit（）和quitSafety的区别</strong></p><p>当我们调用Looper的quit方法时，实际上执行了MessageQueue中的removeAllMessagesLocked方法，该方法的作用是把MessageQueue消息池中所有的消息全部清空，无论是延迟消息（延迟消息是指通过sendMessageDelayed或通过postDelayed等方法发送的需要延迟执行的消息）还是非延迟消息。</p><p>当我们调用Looper的quitSafely方法时，实际上执行了MessageQueue中的removeAllFutureMessagesLocked方法，通过名字就可以看出，该方法只会清空MessageQueue消息池中所有的延迟消息，并将消息池中所有的非延迟消息派发出去让Handler去处理，quitSafely相比于quit方法安全之处在于清空消息之前会派发所有的非延迟消息。</p><p>无论是调用了quit方法还是quitSafely方法只会，Looper就不再接收新的消息。即在调用了Looper的quit或quitSafely方法之后，消息循环就终结了，这时候再通过Handler调用sendMessage或post等方法发送消息时均返回false，表示消息没有成功放入消息队列MessageQueue中，因为消息队列已经退出了。</p><p>需要注意的是Looper的quit方法从API Level 1就存在了，但是Looper的quitSafely方法从API Level 18才添加进来。</p><p><strong>总结</strong></p><pre><code>1. Handler继承自Thread,因此调用start方法,也是执行run方法,run()方法的逻辑都是在子线程中运行的。2. 查看HandlerThread源码可以看到,run()中主要做了Looper.prepare()和looper.loop()创建looper和messagequeue对象并开启消息队列的循环3. 需要注意的是,对于网络io操作,HandlerThread并不适合,因为它只有一个线程,得排队一个一个等着。4. 页面消耗的时候,调用 myHandlerThread.quit() ;looper就不在接受新的消息,消息循环结束,这个时候再通过handler调用sendMessage或者post等方法发送消息时均返回false,表示没有成功的放入消息队列。</code></pre>]]></content>
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>edittext输入限制</title>
      <link href="/2015/12/13/edittext%E8%BE%93%E5%85%A5%E9%99%90%E5%88%B6/"/>
      <content type="html"><![CDATA[<h1 id="EditText智能限制小数点前后分别保留几位"><a href="#EditText智能限制小数点前后分别保留几位" class="headerlink" title="EditText智能限制小数点前后分别保留几位"></a>EditText智能限制小数点前后分别保留几位</h1><ul><li>可以分别限制小数点前面几位，和小数点后几位</li><li>首位输入0时，第二位只能输入小数点</li><li>首位输入小数点，默认显示0.</li><li>嘻嘻!</li></ul><a id="more"></a><p>‘’’</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> frontPoint    小数点前几位数</div><div class="line"> * <span class="doctag">@param</span> behindPoint   小数点后几位数</div><div class="line"> * <span class="doctag">@param</span> editTexts</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setEditTextLimit</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> frontPoint, <span class="keyword">final</span> <span class="keyword">int</span> behindPoint, <span class="keyword">final</span> EditText... editTexts)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (editTexts != <span class="keyword">null</span> &amp;&amp; editTexts.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> EditText editText : editTexts) &#123;</div><div class="line">            editText.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before,</span></span></div><div class="line">                                          <span class="keyword">int</span> count) &#123;</div><div class="line">                    <span class="keyword">if</span> (s.length() == frontPoint + <span class="number">1</span> &amp;&amp; !s.toString().contains(<span class="string">"."</span>)) &#123;</div><div class="line">                        editText.setText(s.toString().substring(<span class="number">0</span>, frontPoint));</div><div class="line">                        editText.setSelection(frontPoint);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (editText.getText().toString().indexOf(<span class="string">"."</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (editText.getText().toString().indexOf(<span class="string">"."</span>, editText.getText().toString().indexOf(<span class="string">"."</span>) + <span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">                            editText.setText(editText.getText().toString().substring(<span class="number">0</span>, editText.getText().toString().length() - <span class="number">1</span>));</div><div class="line">                            editText.setSelection(editText.getText().toString().length());</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (s.toString().contains(<span class="string">"."</span>)) &#123;</div><div class="line">                        <span class="keyword">if</span> (s.length() - <span class="number">1</span> - s.toString().indexOf(<span class="string">"."</span>) &gt; behindPoint) &#123;</div><div class="line">                            s = s.toString().subSequence(<span class="number">0</span>,</div><div class="line">                                    s.toString().indexOf(<span class="string">"."</span>) + behindPoint+<span class="number">1</span>);</div><div class="line">                            editText.setText(s);</div><div class="line">                            editText.setSelection(s.length());</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//直接输入一个点,显示0.</span></div><div class="line">                    <span class="keyword">if</span> (s.toString().trim().substring(<span class="number">0</span>).equals(<span class="string">"."</span>)) &#123;</div><div class="line">                        s = <span class="string">"0"</span> + s;</div><div class="line">                        editText.setText(s);</div><div class="line">                        editText.setSelection(<span class="number">2</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//当输入一个0,后面只能输入小数点</span></div><div class="line">                    <span class="keyword">if</span> (s.toString().startsWith(<span class="string">"0"</span>)</div><div class="line">                            &amp;&amp; s.toString().trim().length() &gt; <span class="number">1</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (!s.toString().substring(<span class="number">1</span>, <span class="number">2</span>).equals(<span class="string">"."</span>)) &#123;</div><div class="line">                            editText.setText(s.subSequence(<span class="number">0</span>, <span class="number">1</span>));</div><div class="line">                            editText.setSelection(<span class="number">1</span>);</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count,</span></span></div><div class="line">                                              <span class="keyword">int</span> after) &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>‘’’</p><p>xml别忘了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:inputType="numberDecimal"</div></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=417859220&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图片上传,角度不正确</title>
      <link href="/2015/08/08/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0-%E8%A7%92%E5%BA%A6%E4%B8%8D%E6%AD%A3%E7%A1%AE/"/>
      <content type="html"><![CDATA[<h1 id="图片上传-部分机型角度不正确问题解决"><a href="#图片上传-部分机型角度不正确问题解决" class="headerlink" title="图片上传,部分机型角度不正确问题解决"></a>图片上传,部分机型角度不正确问题解决</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在app大多都有上传图片功能,比如上传图片,发表动态可能还会上传多张图片,那在我做图片上传的时候,出现了部分机型上传图片后,图片的角度是正确的,我的两个测试机小米和华为是没问题的,但是三星的上传后,图片是默认旋转了90°,那这里要讲的就是怎么解决这个问题,在此记录一下,以保证后面再出现类似需求要多考虑一些<br><a id="more"></a></p><blockquote><p>解决问题</p></blockquote><p>直接进入正题</p><h5 id="当我们上传图片需要做的处理"><a href="#当我们上传图片需要做的处理" class="headerlink" title="当我们上传图片需要做的处理"></a>当我们上传图片需要做的处理</h5><ul><li>压缩</li><li>判断角度是否正确</li><li>如果不角度不对,纠正角度</li><li>其他(加水印什么的看具体需求)</li></ul><p>解决<br>以下代码块</p><pre><code>`     /** * 压缩图片，处理某些手机拍照角度旋转的问题 * @param context * @param filePath * @param file * @param q * @return * @throws FileNotFoundException */public static File compressImage(Context context, String filePath, File file, int q) throws FileNotFoundException {    Bitmap bm = getSmallBitmap(filePath);    int degree = readPictureDegree(filePath);    LogUtil.e(&quot;fengan&quot;, &quot;degree==&quot; + degree);    if (degree != 0) {//旋转照片角度        bm = rotateBitmap(bm, degree);    }    FileOutputStream out = new FileOutputStream(file);    bm.compress(Bitmap.CompressFormat.JPEG, q, out);    return file;}`/** * 获取图片角度 * @param path * @return */public static int readPictureDegree(String path) {    int degree = 0;    try {        ExifInterface exifInterface = new ExifInterface(path);        int orientation = exifInterface.getAttributeInt(                ExifInterface.TAG_ORIENTATION,                ExifInterface.ORIENTATION_NORMAL);        switch (orientation) {            case ExifInterface.ORIENTATION_ROTATE_90:                degree = 90;                break;            case ExifInterface.ORIENTATION_ROTATE_180:                degree = 180;                break;            case ExifInterface.ORIENTATION_ROTATE_270:                degree = 270;                break;        }    } catch (IOException e) {        e.printStackTrace();    }    return degree;} /** * 旋转照片 * @param bitmap * @param degress * @return */public static Bitmap rotateBitmap(Bitmap bitmap, int degress) {    if (bitmap != null) {        Matrix m = new Matrix();        m.postRotate(degress);        bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),                bitmap.getHeight(), m, true);        return bitmap;    }    return bitmap;}    /** * 根据路径获得突破并压缩返回bitmap用于显示 * * @return */public static Bitmap getSmallBitmap(String filePath) {    final BitmapFactory.Options options = new BitmapFactory.Options();    options.inJustDecodeBounds = true;    BitmapFactory.decodeFile(filePath, options);    // Calculate inSampleSize    options.inSampleSize = calculateInSampleSize(options, 480, 800);    // Decode bitmap with inSampleSize set    options.inJustDecodeBounds = false;    return BitmapFactory.decodeFile(filePath, options);}</code></pre><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=490602392&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>祝你今天心情愉快</title>
      <link href="/2015/08/08/%E7%A5%9D%E4%BD%A0%E4%BB%8A%E5%A4%A9%E5%BF%83%E6%83%85%E6%84%89%E5%BF%AB/"/>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28138588&auto=1&height=66"></iframe>]]></content>
      
      <categories>
          
          <category> music </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
